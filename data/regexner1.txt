$entity =(/entities/|/(decision)?/ /entity/|Breadcrumb|reason|pass|Next|Previous|Finish|Value|return|final|calculate|calculation|partial|reason|num|move|module|main|copybook|information|BOM|datum|/entry/ /point/|interface|[tT]ask|characteristic|return|expression|[Pp]arameter|/Folder/|/subfolder/|project|/project/ /entity/|/Decision/ /Flow/|/Business/ /Term/ /Set/|Function|/[rR]uleset/|/Business/ /Term/|Rule|Variable|Pattern)	
$browser = (/[fF]irefox/| /[iI]nternet/ /[eE]xplorer/|Chrome|Safari)
$project=(/rma/ /[pP]roject/|/[pP]roject/ )
$report =(/[rR]eport/)
$user=(/[uU]ser/| /[yY]ou/)
$server=(/[tT]omcat/|/[wW]ebsphere/|/[jJ]boss/) 
$instance =(/[iI]nstance/)
$status = (/[cC]hecked/ /[oO]ut/|/[cC]hecked/ /[iI]n/|/[rR]ead/ /[oO]nly/)
$key =(TAB|Enter|Ctrl|F2|[bB]ackspace)
$table=(/Single-axis/|/Double-axis/)
$location =(/<?ADVISOR_HOME>?/)
$xmlTag = (/<.*>/|/[xX]ml/ /[tT]ag/)
$bin=(/[bB]in/)
$char=(/[cC]]har/|[cC]haracteristic)
$column=(/[cC]olumn/)
$row=(/[rR]ow/)
$code =(/reason/ /code/)
$repoType=(/non\-versioned/|versioned)
$language = (java|/Structured/ /Rule/ /Language/|COBOL|cobol)
$class = (/.*Nd.*/|/java\.lang\..*/|/java\.util\..*/)
$company = (/Fair/ /Isaac/|/Fair/ /Isaac/ /Corp/|/Fair/ /Isaac/ /Corporation/|FICO)
$metaphor =(/[rR]uleset/|/score/ /model/|/[Dd]ecision/ /[gG]raph/|/[dD]ecision/ /[tT]able/|/[sS]corecard/|/Decision/ /tree/| /[cC]lassic/ /[dD]ecision/ /[tT]ree/)
$method =(/.*\(\)/|/[fF]unction/|/[mM]ethod/)
$flowItems =([tT]ask|[sS]ubflow|Split)

$query =(/verification/ /query/|/comparison/ /query/)
$file=(/Deployment/ /Definition/|DD|RMAD|/.*\.pdf/|/.*\.zip/|/.*\.html/| /.*\.server/|/instance/ /file/|/BOM/ /file/ |/BOM/ /xml/)
$template =(/[dD]esicion/   /[tT]able/ /[tT]emplate/| /[sS]core/ /[cC]ard/ /[tT]emplate/| /[sS]core/ /[mM]odel/ /[tT]emplate/|/[tT]emplate/ | /[dD]esicion/   /[tT]ree/ /[tT]emplate/ | /[rR]uleset/   /[tT]emplate/| /[rR]ule/   /[tT]emplate/)
$page = (/[eE]xplorer?/ /pane/|/filter/ /pane/|/test/ /pane/|/search/ /pane/|/compare/ /pane/ | /Project/ /Explorer/|Explorer|/[aA]dvanced/ /[bB]uilder/ | /Version/ /history/|/Verify/ /pane/|/Rule Definition/|/Rule/ /Builder/)
$app = (/[bB]laze/ /[aA]dvisor/|/[bB]laze/|/[bB]laze/ /Ide/|RMA|rma|/[rR]ules?/ /[mM]aintenance/ /[aA]pplications?/)
$versioning =(/[eE]xplicit/ /[vV]ersioning/|/[iI]mplicit/ /[vV]ersioning/)
$configFile =(/.*\.server/|/[cC]onfig/ /[fF]ile/|/[cC]onfiguration/ /[fF]ile/|RMAD|rmad|/Deployment/ /definition/|/System/ /Definition/)
$event =(/\w{3,}?/ /[eE]vents?/)
$tab =(/\w{3,}?/ /[tT]abs?/|[tT]at)
$eventE=(/.*EventsEnabler/|/[eE]vent/ /[eE]nablers?/)
$field=(/\w{1,}?/ /\w{3,}?/ /[fF]ield/)
$click=(/[cC]lick/ /\w{3,}?/)
$name=(/\w{3,}?/ /[nN]ames?/)
$picker=(/\w{3,}?/ /[pP]icker/)
$group=(/\w{3,}?/ /[gG]roup/)
$tab =(/\w{3,}?/ /[tT]ab/|[tT]ab)
$panel =(/\w{3,}?/ /[pP]anel/|/[pP]anel/)
$service = (/\w{3,}?/ /[sS]ervice/)
$editor = (/\w{3,}?/ /[eE]ditor/|/[eE]ditor/)
$wizard =(/\w{3,}?/ /[wW]izard/)
$score =(/\w{3,}?/ /[sS]core/|[sS]core)
$header=(/\w{3,}?/ /[hH]eader/)
$point=(/\w{3,}?/ /[pP]oint/)
$dialog=(/\w{3,}?/ /[dD]ialog/)
$queue=(/\w{3,}?/ /[qQ]ueue/)
$signature=(/\w{3,}?/ /[sS]ignature/)
$type=(/\w{3,}?/ /type/)
$property=(/\w{3,}?/ /[pP]roperty/|property| /dynamic/ /\w{3,}?/ /[pP]roperty/)
$icon=(/\w{3,}?/ /[iI]con/|/print/ /icon/)
$view=(/\w{3,}?/ /[vV]iew/)
$rules=(/(business)?/ /rules/)

$operation= (/operations?/|/editing/ /operations?/|Rename|Refresh|Download|Print|Edit|Compile|Delete|/Rule/ /Profiling/|/Check/ /Out/|Compiling|/Check/ /In/|Publish|Save|Promote|Edit|/Insert/ /Column/|/Insert/ /Row/|/Save/ /As/|/New/ /Verification/ /Query/)


# Define ruleType to be over tokens
ENV.defaults["ruleType"] = "tokens"
ENV.defaults["stage"] = 1



ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }
tokens = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation" }




{ 
ruleType: "tokens",
pattern:   ($key) ,
priority : 1,
result :"KEY",
action: ( Annotate($0, ner, "KEY"))
}

{ 
ruleType: "tokens",
pattern:   ($status) ,
priority : 1,
result :"STATUS",
action: ( Annotate($0, ner, "STATUS"))
}

{ 
ruleType: "tokens",
pattern:   ($instance) ,
result :"INSTANCE",
priority : 1,
action: ( Annotate($0, ner, "INSTANCE"))
}

{ 
ruleType: "tokens",
pattern:   ($browser) ,
result :"OPERATION",
priority : 1,
action: ( Annotate($0, ner, "BROWSER"))
}


{ 
ruleType: "tokens",
pattern:   ($code) ,
result :"CODE",
priority : 1,
action: ( Annotate($0, ner, "CODE"))
}


{ 
ruleType: "tokens",
pattern:   ($flowItems) ,
priority : 1,
result :"FLOW_ITEM",
action: ( Annotate($0, ner, "FLOW_ITEM"))
}

{ 
ruleType: "tokens",
pattern:   ($row) ,
priority : 1,
result :"ROW",
action: ( Annotate($0, ner, "ROW"))
}

{ 
ruleType: "tokens",
pattern:   ($column) ,
priority : 1,
result :"COLUMN",
action: ( Annotate($0, ner, "COLUMN"))
}


{ 
ruleType: "tokens",
pattern:   ($bin) ,
priority : 1,
result :"BIN",
action: ( Annotate($0, ner, "BIN"))
}

{ 
ruleType: "tokens",
pattern:   ($char) ,
priority : 1,
result :"CHAR",
action: ( Annotate($0, ner, "CHAR"))
}


{ 
ruleType: "tokens",
pattern:   ($company) ,
result :"ORGANIZATION",
priority : 1,
action: ( Annotate($0, ner, "ORGANIZATION"))
}

{ 
ruleType: "tokens",
pattern:   ($language) ,
priority : 1,
result :"LANGUAGE",
action: ( Annotate($0, ner, "LANGUAGE"))
}


{ 
ruleType: "tokens",
pattern:   ($metaphor) ,
result :"METAPHOR",
priority : 1,
action: ( Annotate($0, ner, "METAPHOR"))
}



{ 
ruleType: "tokens",
pattern:   ($entity) ,
priority : 1,
result :"SRL_ENTITY",
action: ( Annotate($0, ner, "SRL_ENTITY"))
}


{ 
ruleType: "tokens",
pattern:   ($report) ,
priority : 1,
result :"REPORT",
action: ( Annotate($0, ner, "REPORT"))
}

{ 
ruleType: "tokens",
pattern:   ($project) ,
priority : 1,
result :"PROJECT",
action: ( Annotate($0, ner, "PROJECT"))
}

{ 
ruleType: "tokens",
pattern:   ($class) ,
priority : 1,
result :"CLASS",
action: ( Annotate($0, ner, "CLASS"))
}

{ 
ruleType: "tokens",
pattern:   ($server) ,
priority : 1,
result :"SERVER",
action: ( Annotate($0, ner, "SERVER"))
}

{ 
ruleType: "tokens",
pattern:   ($user) ,
priority : 1,
result :"USER",
action: ( Annotate($0, ner, "USER"))
}

{ 
ruleType: "tokens",
pattern:   ($xmlTag) ,
priority : 1,
result :"XML_TAG",
action: ( Annotate($0, ner, "XML_TAG"))
}

{ 
ruleType: "tokens",
pattern:   ($location) ,
priority : 1,
result :"LOCATION",
action: ( Annotate($0, ner, "LOCATION"))
}

{ 
ruleType: "tokens",
pattern:   ($method) ,
priority : 1,
result :"METHOD",
action: ( Annotate($0, ner, "METHOD"))
}

{ 
ruleType: "tokens",
pattern:   ($versioning) ,
result :"VERSIONING",
priority : 2,
action: ( Annotate($0, ner, "VERSIONING"))
}

{ 
ruleType: "tokens",
pattern:   ($app) ,
result :"APPLICATION",
priority : 2,
action: ( Annotate($0, ner, "APPLICATION"))
}



{ 
ruleType: "tokens",
pattern:   ($type) ,
priority : 2,
result :"TYPE",
action: ( Annotate($0, ner, "TYPE"))
}

{ 
ruleType: "tokens",
pattern:   ($signature) ,
priority : 2,
result :"SIGNATURE",
action: ( Annotate($0, ner, "SIGNATURE"))
}

{ 
ruleType: "tokens",
pattern:   ($queue) ,
priority : 2,
result :"QUEUE",
action: ( Annotate($0, ner, "QUEUE"))
}

{ 
ruleType: "tokens",
pattern:   ($dialog) ,
priority : 2,
result :"DIALOG",
action: ( Annotate($0, ner, "DIALOG"))
}

{ 
ruleType: "tokens",
pattern:   ($point) ,
result :"POINT",
priority : 2,
action: ( Annotate($0, ner, "POINT"))
}



{ 
ruleType: "tokens",
pattern:   ($header) ,
result :"HEADER",
priority : 2,
action: ( Annotate($0, ner, "HEADER"))
}

{ 
ruleType: "tokens",
pattern:   ($service) ,
priority : 2,
result :"SERVICE",
action: ( Annotate($0, ner, "SERVICE"))
}


{ 
ruleType: "tokens",
pattern:   ($panel) ,
priority : 2,
result :"PANEL",
action: ( Annotate($0, ner, "PANEL"))
}

{ 
ruleType: "tokens",
pattern:   ($wizard) ,
priority : 2,
result :"WIZARD",
action: ( Annotate($0, ner, "WIZARD"))
}


{ 
ruleType: "tokens",
pattern:   ($score) ,
priority : 2,
result :"SCORE",
action: ( Annotate($0, ner, "SCORE"))
}


{ 
ruleType: "tokens",
pattern:   ($editor) ,
result :"EDITOR",
priority : 2,
action: ( Annotate($0, ner, "EDITOR"))
}


{ 
ruleType: "tokens",
pattern:   ($tab) ,
priority : 2,
result :"TAB",
action: ( Annotate($0, ner, "TAB"))
}




{ 
ruleType: "tokens",
pattern:   ($group) ,
priority : 2,
result :"GROUP",
action: ( Annotate($0, ner, "GROUP"))
}


{ 
ruleType: "tokens",
pattern:   ($picker) ,
priority : 2,
result :"PICKER",
action: ( Annotate($0, ner, "PICKER"))
}

{ 
ruleType: "tokens",
pattern:   ($name) ,
priority : 2,
result :"NAME",
action: ( Annotate($0, ner, "NAME"))
}

{ 
ruleType: "tokens",
pattern:   ($template) ,
priority : 2,
result :"TEMPLATE",
action: ( Annotate($0, ner, "TEMPLATE"))
}

{ 
ruleType: "tokens",
pattern:   ($view) ,
priority :2,
result :"VIEW",
action: ( Annotate($0, ner, "VIEW"))
}

{ 
ruleType: "tokens",
pattern:   ($property) ,
result :"PROPERTY",
priority :2,
action: ( Annotate($0, ner, "PROPERTY"))
}


{ 
ruleType: "tokens",
pattern:   ($file) ,
result :"FILE",
priority : 2,
action: ( Annotate($0, ner, "FILE"))
}

{ 
ruleType: "tokens",
pattern:   ($page) ,
priority :2,
result :"PAGE",
action: ( Annotate($0, ner, "PAGE"))
}

{ 
ruleType: "tokens",
pattern:   ($icon) ,
priority :2,
result :"ICON",
action: ( Annotate($0, ner, "ICON"))
}

{ 
ruleType: "tokens",
pattern:   ($click) ,
priority : 2,
result :"BUTTON",
action: ( Annotate($1, ner, "BUTTON"))
}

{ 
ruleType: "tokens",
pattern:   ($field) ,
result :"FIELD",
priority : 2,
action: ( Annotate($0, ner, "FIELD"))
}

{ 
ruleType: "tokens",
pattern:   ($tab) ,
result :"TAB",
priority : 2,
action: ( Annotate($0, ner, "TAB"))
}



{ 
ruleType: "tokens",
pattern:   ($eventE) ,
result :"EVENT_ENABLER",
priority : 2,
action: ( Annotate($0, ner, "EVENT_ENABLER"))
}

{ 
ruleType: "tokens",
pattern:   ($event) ,
priority : 2,
result :"EVENT",
action: ( Annotate($0, ner, "EVENT"))
}



{ 
ruleType: "tokens",
pattern:   ($table) ,
result :"TABLE",
action: ( Annotate($0, ner, "TABLE"))
}



{ 
ruleType: "tokens",
pattern:   ($query) ,
result :"QUERY",
priority: 2,
action: ( Annotate($0, ner, "QUERY"))
}

{ 
ruleType: "tokens",
pattern:   ($configFile) ,
result :"CONFIG_FILE",
priority: 2,
action: ( Annotate($0, ner, "CONFIG_FILE"))
}


ENV.defaultStringPatternFlags = 2
ENV.defaultStringMatchFlags =2

{ 
ruleType: "tokens",
pattern:   ($operation) ,
priority :3,
result :"OPERATION",
action: ( Annotate($0, ner, "OPERATION"))
}




