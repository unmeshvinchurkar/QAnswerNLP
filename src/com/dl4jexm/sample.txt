
CHAPTER 1
FICO Blaze Advisor Rule Maintenance
Application
Welcome to the FICO® Blaze Advisor Rule Maintenance Application (RMA). You
can use the Blaze Advisor RMA to create and manage business rules that
define some aspect of your company's objectives. In Blaze Advisor, you can
add business rules to a decision service that is called by your enterprise
application any time such a decision is needed.
For example, suppose you own an insurance company that wants to use a
decision service to do some preliminary processing for online car insurance
applications. You want your decision service to only process insurance
applications that meet minimum state law requirements. Therefore you create
some business rules in the decision service to evaluate an applicant's age and
whether or not the applicant holds a valid driver's license so that when each
insurance application receives preliminary processing to ensure that only those
applications that meet minimum state law requirements receive further
processing for insurance coverage.
The information in this guide is written based on the default behavior of the
RMA. Because there are a significant number of customization possibilities,
there may be information in this guide that is not applicable for your RMA.
Additional information about the RMA is available in the Blaze Advisor
documentation. If you do not have access to the documentation, contact your
RMA system administrator.
Fair Isaac Corporation Confidential and Proprietary Information 9
Chapter 1: FICO Blaze Advisor Rule Maintenance Application
10 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 2
Overview of the RMA Interface
With the Blaze Advisor Rule Maintenance Application (RMA) you can create
and manage your business rules. For many companies, the business logic
encapsulated in its business rules represent the facts, policies and procedures
that represent their day-to-day operations and competitive advantage. In the
Blaze Advisor RMA, business rules can be written in entities such as rulesets,
decision tables, decision trees, and score models.
The default RMA home page contains the following features:
■ The Global Command Bar contains icons that are used to navigate
throughout the RMA:
- The Help icon opens the Help system.
- The Session information icon opens a window where you can see the
name of the project you are editing, the repository type, and whether or
not versioning is being used.
- The Log off icon signs you out of the RMA and returns you to the RMA
login page.
■ The Projects tile with a list of projects included in the RMA. Click a
project link to go to the project page.
■ The Print icon allows you to print the projects list.
Figure 1: Rule Maintenance Application Interface
Fair Isaac Corporation Confidential and Proprietary Information 11
The project page contains the following features:
■ On the project page, the Global Command Bar also contains the Home
icon that takes you to the home page where you can select a different
project to edit.
■ The Navigator contains panes that are used for different operations:
- Explore pane that enables you to traverse the hierarchy of folders and
open an entity for viewing or editing. Additionally, you can click the
Expanded View icon to open a tabular view of the project content where
you can perform common operations on entities and folders.
- Search pane that is used for opening an existing query in the Query
editor or for creating a new one.
- Filter pane that is used for opening an existing filter in the Filter editor
or for creating a new one.
- Compare pane that is used for opening an existing comparison query in
the Comparison Query Editor or for creating a new one.
- Verify pane that is used for opening an existing comparison query in
the Comparison Query Editor or for creating a new one.
- Test pane that is used to upload a dataset to the Decision Testing page
to test whether or not the rules are generating the expected results.
Also, if there are test cases in the project, you can run them using the
brUnit testing framework.
■ The Breadcrumb allows you to quickly traverse the path to an entity.
The Breadcrumb displays the path to the entity that is currently selected
in the Work Area. You can select an entity name or folder name in the
path. You can also use the Show navigation menu icon, which displays
after each item in the path, to open other entities and folders in the
hierarchy.
■ The Work Area is where editing operations are performed. When an
entity is opened for editing, the appropriate editor appears in the Work
Area. For example, a decision tree opens in the Decision Tree editor and
a Standard Business Query opens in the Query editor.
Managing Entities and Folders
Each project can include multiple entities and folders. When you sign into an
RMA, you are connected to a repository where the entities are stored.
Changes made to the entities are stored in the repository. The commands
that you have available in the RMA depend on the features and components
that were added to the RMA and the repository type that is being used. At
any time, you can view details about the repository by clicking the Session
Info icon on the Global Command Bar.
Chapter 2: Overview of the RMA Interface
12 Fair Isaac Corporation Confidential and Proprietary Information
Routine Operations
Use the Project Explorer to perform routine operations such as previewing an
entity, renaming an entity, or creating subfolders. The Project Explorer is a
tabular view of the entities and folders displayed in the Explore pane. Note
that routine operations can be performed only on subfolders and not on the
root folder.
To open the Project Explorer, expand the Explore pane, and click the
Expanded View command. To perform a routine operation, select an entity or
a folder and then select a command from the Project Explorer toolbar or the
Context toolbar. To access the Context toolbar, select a row containing a
specific entity or folder and then click the blue orb at the end of the row.
When you select an entity or folder in Project Explorer, click anywhere in the
row containing the entity. If you click the name, the entity opens in an editor.
Note The list of folders appears in alphabetical order. To reverse the
order, click the triangle in the Name column header.
Opening the RMA
When you generate an RMA from the Blaze Advisor IDE, the files are
generated in a directory on your local machine and the application is
automatically launched in a web browser.
You can set your browser preference in the Blaze Advisor IDE. To set your
preference, select Window > Preferences, expand Blaze Advisor and select
General. Use the browse button in the Web Browser field to select the .exe
for the browser. For example, C:\Program Files\Internet Explorer
\iexplore.exe.
1 To open an RMA, select the project in the IDE and select Project > Rule
Maintenance Applications > Start
[RepositoryConnectionName.ProjectName].
A file selector opens to the location of your RMA files.
Tip You can also this step to select a different RMA.
2 Click Select Folder.
3 Select Project > Rule Maintenance Applications > Open Rule
Maintenance Applications.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 13
Project Explorer Toolbar Commands
The commands on the Project Explorer toolbar are used to perform routine
operations such as creating, deleting, and previewing decision entities at the
project level. While you can perform routine operations on subfolders, you
cannot perform operations on the root folder.
Table 1: Project Explorer Toolbar Commands
Command Icon Description
New New Creates a new decision entity. You can create a decision
table only if a Decision Table Template was included in
the project. The same holds true for a scorecard. You
can create a scorecard only if a Score Model Template
was included in the project.
Note Currently, Group Templates containing a value
holder that references a generic decision tree or ruleset
are not supported.
Cut Cuts one or more decision entities or subfolders.
Copy Copies one or more decision entities or subfolders.
Paste Pastes one or more cut or copied decision entities or
subfolders. In a versioned RMA, after a decision entity is
cut and pasted, the name of the decision entity that was
cut is displayed with a line through it until it is checked
in. Decision entities in a folder must have unique names.
If a decision entity is copied and pasted to a folder
where a decision entity with the same name exists, the
new decision entity is automatically appended with a
number starting at 1.
Delete Deletes one or more decision entities or subfolders. A
subfolder can be deleted only if it is empty. You cannot
delete the root folder.
Preview Opens a window where the decision entity can be
previewed.
Rename Makes a decision entity or subfolder name editable.
Press Enter to register the name change.
Check In Checks in changes to the decision entities into the
repository. This icon is visible if explicit versioning is
being used in the RMA.
Check Out Checks out one or more decision entities from the
repository. This icon is visible if explicit versioning is
being used in the RMA.
Cancel Check
Out
Cancels the check out of one or more decision entities.
This icon is visible if explicit versioning is being used in
the RMA.
Update Overwrites decision entities and folders in your
workspace with the latest versions from the repository.
Chapter 2: Overview of the RMA Interface
14 Fair Isaac Corporation Confidential and Proprietary Information
Table 1: Project Explorer Toolbar Commands (continued)
Command Icon Description
Refresh Refreshes your workspace with changes that were
made by another team member using the project.
Print Prints the list of decision entities in the Project Explorer.
Generate Report Generates a report so you can view the relationships
between the decision entities in the decision service.
Compile Compiles the project and reports any compilation errors.
Download Rules Allows you to download the decision service with the
workspace or with the repository.
Generating Reports
Generate a report to view the relationships between entities. After the .html
format report is generated, download it and open it from your file
management system.
There are some limitations in this release:
■ Decision tree information is available in the reports, but a picture of the
decision tree is not.
■ The reports cannot be viewed using Google Chrome.
1 From the Explore pane, click the Expanded view icon.
2 Click the Generate Report icon on the Project Explorer toolbar.
3 In File Name Prefix, enter a name for the report.
4 (Optional) Select the Include Rule SRL check box if you want to see the
rule SRL when you click on a rule in the report.
5 (Optional) Select the Include Cross Reference check box if you want the
report to analyze the rules.
6 Click OK.
7 Select the location where you want to save the .zip file and click Save.
For best results, save the .zip file to a new folder so you can later unzip
the contents there.
8 Click Close.
9 Locate the .zip file in your file management system and unzip the file.
10 Click on the <File Name Prefix>Contents.html file to open the report.
Related Links
Project Explorer Toolbar Commands
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 15
Compiling Rule Services
Compile your rule project to ensure that it does not generate errors.
1 From the Explore pane, click the Explore icon.
2 Click the Compile icon on the Project Explorer toolbar.
If compilation errors occur, the errors are reported at the bottom of the
Project Explorer.
Note If you are using a supported version of Microsoft Internet Explorer,
you can use the Copy errors to clipboard icon directly above the error
to copy the error message to the browser clipboard. If you click the Copy
error to clipboard icon, a message appears asking you to allow the web
page to access your clipboard. Click Allow access to paste the error
message to a text file or email message. This feature is not available in
Firefox or Chrome.
Related Links
Project Explorer Toolbar Commands
Downloading Rules
If you see the Download Rules command on the home page or the Project
Explorer toolbar, the current project and the contents of the entire workspace
contents can be downloaded to a .zip file.
Depending on the repository that is used for your project, you may see one
or more options. If you are using a File BVS repository with private
workspaces, you see the option to download a workspace or a repository. If
you are using a non-versioned repository or a versioned repository that uses
another type of versioning, such as Subversion, you see only the option to
download a workspace.
■ Download Workspace (includes local changes but no version history)
If the workspace is downloaded, any saved changes that have not been
checked in to the versioning service are included. However, the
versioning history for your entities is not included.
■ Download Repository (includes version history but no local changes)
If the repository is downloaded, the version history is included but any
local changes that have not been checked into the versioning service are
not included. For best results, check in all of your changes and update
your workspace to make sure that you have all of the latest changes
before downloading the rules.
After you have downloaded the .zip file and unzipped the contents, you can
connect to the repository or workspace using Blaze Advisor 7.4. To use the
repository or workspace in Blaze Advisor, set up the appropriate connection
type.
Chapter 2: Overview of the RMA Interface
16 Fair Isaac Corporation Confidential and Proprietary Information
Depending on the web browser you are using, you see the following behavior
when you click Download Rules:
■ If you are using Microsoft Internet Explorer 11, you see a message asking
you to click one of the following items:
- Open to open the .zip file using WinZip.
- Save to save the .zip file to a local folder.
You can also use the Save drop-down list to Save As and Save and
Open.
If you select the Save option, you can use the Open drop-down list to
Open with a specific application, Open folder where the .zip file was
downloaded or View downloads to view the Downloads folder.
- Cancel to exit the message.
■ If you are using Google Chrome, the .zip file is added to your Downloads
folder on your local system.
■ If you are using Mozilla Firefox, you see a dialog where you can select one
of the following items:
- Open with to optionally select an application to open the .zip file.
- Save File to save the .zip file to the Downloads folder on your local
system.
■ Click OK to proceed with the action or click Cancel to exit the dialog.
Related Links
Project Explorer Toolbar Commands
Keyboard Shortcuts in the Project Explorer
Use keyboard shortcuts to perform common tasks in the Project Explorer.
Table 2: Project Explorer Shortcuts
Action Shortcut
Edit or rename selected item F2
Cancel an edit or rename operation Esc
Select multiple non-adjacent rows Ctrl-click
Select multiple adjacent rows Shift-click
Note You can select multiple items to delete, copy, cut, or paste.
However, no other operations are allowed for multiple selections.
Valid Entity Names
When you are creating and naming or renaming an entity, the validation
messages and auto-correction behavior differs depending on the type of entity
or sub-entity . This topic summarizes the behavior for each entity type.
There are two different types of names that can represent an entity in the
user interface, a display name and an instance or SRL name. These names
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 17
may be the same or they may be different. For example, you may see a
display name and a slightly different instance name displayed in the user
interface for the same entity. In other cases, an entity may only be
represented by a display name.
■ The display name displays in the Explore pane, breadcrumb and in the
Project Explorer page. Usually it is the name entered by the user who
creates the entity. This name can be edited in the Project Explorer.
■ The instance name displays in the editor and is also known as the SRL
name. Because this name is used in the underlying SRL code, it cannot
contain any spaces or certain special characters except "_". This name
can be edited in the editor pane but if it is edited, any rules that refer to
the instance must also be edited, otherwise you may see a compilation
error.
■ For Blaze Advisor users, the storage name displays in the workspace or
repository on the file system. The storage name is the name the entity is
given when it is created. Often the storage name is the same as the
display name unless the entity has been renamed in the user interface. If
the display name or the instance name is edited, the storage name will
not change. If you need to refer to the entity in its repository or
workspace location, you must use its path on the file system and its
storage name. FICO does not recommend editing the storage name as
this may make the entity unusable in the user interface.
The following table describes the differences in validation and auto-correction
behavior that occurs when you create an entity and enter an name with
spaces or special characters.
Entity Type Display Name Instance Name
Decision Flow Can include spaces and/or
special characters such as '%
$/\:|'.
If any spaces and/or special
characters such as '%$/\:|' are
used, the spaces or characters
are replaced by an underscore
(_).
Business Term Set Can include spaces and/or
special characters such as '%
$/\:|'.
If any spaces and/or special
characters such as '%$/\:|' are
used, the spaces or characters
are replaced by an underscore
(_).
Business Term Cannot include spaces
and/or special characters and
will revert to the default
business term name,
Term<n>, if you try to create
a term with spaces and
special characters in its
name.
Not applicable. Not a top-level
SRL entity.
Decision Tree Can include spaces and/or
special characters such as '%
$/\:|'.
If any spaces and/or special
characters such as '%$/\:|' are
used, the spaces or characters
are replaced byan underscore
(_).
Chapter 2: Overview of the RMA Interface
18 Fair Isaac Corporation Confidential and Proprietary Information
Entity Type Display Name Instance Name
Function Can include spaces and/or
special characters such as '%
$/\:|'.
If any spaces and/or special
characters such as '%$/\:|' are
used, the spaces or characters
are replaced by an underscore
(_).
Ruleset Can include spaces and/or
special characters such as '%
$/\:|'.
If any spaces and/or special
characters such as '%$/\:|' are
used, the spaces or characters
are replaced by an underscore
(_).
Rule Cannot include spaces
and/or special characters and
will revert to the default rule
name, rule<n>, if you try to
create a rule with spaces and
special characters in its
name.
Not applicable. Not a top-level
SRL entity.
Variable Cannot include spaces
and/or special characters and
will revert to the default
variable name, entity<n>, if
you try to create a variable
with spaces and special
characters in its name.
Not applicable. Not a top-level
SRL entity.
Pattern Cannot include spaces
and/or special characters and
will revert to the default
pattern name, entity<n>, if
you try to create a pattern
with spaces and special
characters in its name.
Not applicable. Not a top-level
SRL entity.
Parameter Cannot include spaces
and/or special characters and
will revert to the default
parameter name,
parameter<n>, if you try to
create a parameter with
spaces and special
characters in its name.
Not applicable. Not a top-level
SRL entity.
Decision Table If you have generated an
RMA with a project
containing a Decision Table
Template, you can create a
new instance as a custom
entity. The instance file name
can contain spaces and
special characters such as: '.
$/\:|'.
The decision table SRL name is
displayed only if this option was
selected when the RMA was
generated.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 19
Entity Type Display Name Instance Name
If the SRL name of a decision
table is visible in the Decision
Table editor, that name
cannot contain spaces or
special characters. If you
attempt to use a character
that is not allowed, the name
reverts to the previous name.
Decision Tree from FSML
Import
The Decision Tree name is
assigned by default on the
third page of the import
wizard and can be edited on
this page during the import
process. If you edit the name,
it cannot include any of the
following special characters,
'.$/\:|'. Other special
characters and/or spaces are
permitted.
If any spaces and/or special
characters such as '$/\:|' are
used, the spaces or characters
are replaced by an underscore
(_). The SRL name cannot be
edited.
Scorecard from a Score
Model Template
If you have generated an
RMA with a project
containing a Score Model
Template, you can create a
new instance as a custom
entity. The instance file name
can contain spaces and
special characters such as: '.
$/\:|'.
If the SRL name of a
scorecard is visible in the
Scorecard editor, that name
cannot contain spaces or
special characters. If you
attempt to use a character
that is not allowed, the name
reverts to the previous name.
The scorecard SRL name is
displayed only if this option was
selected when the RMA was
generated.
Scorecard from PMML Import If the SRL name of a
scorecard is visible in the
Scorecard editor, that name
cannot contain spaces or
special characters. If you
attempt to use a character
that is not allowed, the name
reverts to the previous name.
The scorecard SRL name is
displayed only if this option was
selected when the RMA was
generated.
Folder Can include spaces and/or
special characters such as '$/
\:|?*<>'.
Not applicable. Not a SRL
entity.
Chapter 2: Overview of the RMA Interface
20 Fair Isaac Corporation Confidential and Proprietary Information
Version Management
When a versioned repository is used with an RMA, the entities you create or
edit are versioned each time a check in is performed.
In the RMA, there are two ways of interacting with a versioned repository:
Implicit
versioning
Interactions with the versioning service occur transparently. For
example, an entity is checked out in the RMA when it is enabled for
editing. Conversely, an entity is checked in when the editor is
closed.
Explicit
versioning
To make a change to an entity, you must check in or check out the
entity. You create a new version each time you check in an entity.
If you do not know which type of versioning is being used in the RMA, click
the Session Info icon on the Global Command Bar.
The entity version history is maintained. You can view previous versions and
promote a previous version to replace the current working version.
Version Management Commands
Use version management commands to check in, check out, and promote
previous versions of entities.
If you are using a versioned repository, the version management commands
appear on the following toolbars:
■ Project Explorer toolbar
■ Context toolbar in the Project Explorer
■ Context toolbar associated with lists of entities or display tables
■ Editor toolbars
Table 3: Versioning Command Descriptions
Command Icon Description
Check in Checks in one or more entities.
Check out Checks out one or more entities for editing.
Cancel Checkout Cancels a check out of one or more entities.
Promote Promotes an older version to replace the
current working version.
Update Updates the workspace with the latest
versions of entities from the repository. This
icon is located only on the Project Explorer
toolbar.
When an entity is checked out, the Edit Privilege icon appears next to it in
the Explore pane and the Project Explorer.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 21
You will notice the following behavior when performing check in and check
out operations:
■ If an entity is opened first and then checked out, it is automatically
enabled for editing.
■ If the entity is checked out first in the Project Explorer and then opened,
click the Edit icon to enable it for editing.
■ If an entity is checked out and closed, when you open it, click the Edit
icon to enable it for editing.
■ If an entity, such as a ruleset, contains other sub-entities that are stored
separately (rules), checking out the entity (ruleset) does not check out
the sub-entities (rules). Each one must be checked out separately.
However, when you check in the top-level entity (ruleset), if any of the
sub-entities have been modified but not checked in, you have the option
to check in the sub-entities along with the changes to the entity.
■ When you check in Group with sub-entities stored separately, the check
in occurs automatically at the same time.
In the Project Explorer, you can perform versioning operations, such as check
in or check out, on multiple entities by selecting the row for each entity and
then clicking the appropriate versioning command on the Project Explorer
toolbar. You cannot perform versioning operations at the folder level.
Version History Page
If you use a versioned repository, the History page contains information
about the working copy or previous versions of an entity. It also allows you to
view and compare those other versions.
The History page contains a working copy status table and a version history
table.
Figure 2: History Page
Chapter 2: Overview of the RMA Interface
22 Fair Isaac Corporation Confidential and Proprietary Information
Working
Copy
Status
This table shows the status of the base version in the workspace. Click
the icon in the View column to view the contents of the working copy.
Version
History
This table displays information for all versions. Click the View icon
next to an item in the Version History Table to open it and view the
contents. To compare two different versions, select the check box for
each version in the Compare column, and then click the Compare link.
Note: You cannot compare two versions of a decision tree in this
release.
There are two ways to open the History page:
■ Open the entity, select History from the Version drop-down menu.
■ Open the Project Explorer, select the row containing the entity, and click
the History icon in the Version column.
Promoting Previous Versions
If you use a versioned repository, you can choose to use an older version of
an entity as the latest version.To use an older version as the latest version,
promote the older version to be the base working copy. Promoting a previous
version overwrites the current working copy with the contents of the older
version.
If a previous version that references other entities is promoted, you may need
to promote the previous versions of those entities created in the same time
period to avoid any compatibility issues.
1 Open the entity for which you want to promote a previous version.
2 If you are using Explicit versioning, click the Check Out icon on the editor
toolbar.
3 From the Version menu in the upper right section of the page, select the
number of the previous version to promote.
4 Click the Promote icon.
5 Click OK.
6 Perform one of the following:
■ If you are using Explicit versioning, the promoted entity has been
saved to your workspace. Click the Check In icon to check in the
promotion to the versioning service.
■ If you are using Implicit versioning, click the Save icon to check in the
promoted entity to your workspace.
The promoted entity is now the latest version, and the version has been
updated by 1. The Version History and Working Copy Status tables do not
indicate which version has been promoted, so it is recommended to note
the promoted version number for your records.
After the promoted entity is checked in, the former working copy is preserved
as a revision.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 23
Chapter 2: Overview of the RMA Interface
24 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 3
Authoring Rules in Rulesets
Author rules in a ruleset to maintain a set of rules that work together to
achieve a particular business decision. For example, a ruleset could contain
rules that work together to generate a premium for an automobile insurance
quote.
Each rule in a ruleset contains the following:
■ One or more conditions to test
■ One or more actions to execute when one or more of the conditions are
satisfied
This is an example of a rule:
if theCustomer.age is greater than 18 and theCustomer.drivingRecord is
“excellent”
then theCustomer.valueProposition is “high"
Create rule conditions and actions by dragging and dropping object and
variable properties in the Rule Builder interface. Alternatively, you can write
condition or action expressions using FICO's Structured Rule Language in the
Advanced Builder. After you create the rules, you can add the ruleset to a
task in a decision flow so that the rules are evaluated when data is passed
into the rule service. Alternatively, you can call a ruleset from another
functional such as a function, a decision table or a rule. For example, you can
call a ruleset from a function.
Creating Rulesets
Create a ruleset to author a set of rules that will be evaluated based on the
data passed into the rule service.
Note The system template version must be at least the minimum required
for the release in order for you to create an entity from the New dropdown
menu. If you are unable to create such an entity due to an error,
you may need to update your system templates or contact your RMA
system administrator.
The rulesets and rules you can create in an RMA and the resources made
available for the rule-writing task are determined by choices made in the
project in the Blaze Advisor IDE. The rulesets you can create in the RMA are
instances of the rulesets in a project.
1 In the Project Explorer, open the New drop-down menu.
Fair Isaac Corporation Confidential and Proprietary Information 25
2 Select Ruleset.
3 In the Create Ruleset dialog, enter a unique name in the Name field.
4 Press Create.
When you open or create a ruleset, the Ruleset Definition page appears.
From the Ruleset Definition page, you can define the ruleset and its
associated parameters, rules, and local variables.
Related Links
Valid Entity Names
Defining Rulesets
Use the Ruleset Definition page to define the ruleset.
It contains the following fields and sections:
Ruleset name A unique name for the ruleset. A valid name consists of one or
more letters (A–Z, a–z), digits (0–9), and underscores (_). It
cannot contain spaces, punctuation marks, or special characters,
such as $ or %.
To call a ruleset from another SRL entity, you must use the name
of the ruleset in a call statement.
Description (Optional) A description of the ruleset.
Return type The type of value the ruleset returns. Set the return type to void
if the ruleset does not return a value.
Parameters (Optional) Parameters that you can use to define rules in the
ruleset.
Variables (Optional) Variables that you can use to define rules in the
ruleset.
Patterns (Optional) Patterns that you can use to define rules that evaluate
each available object of a particular type, or each available
object of a particular type in an array.
Initialization
Rule
(Optional) Initialization statements for the rules in the ruleset.
Rules The rules associated with the ruleset. You can create one or
more rules in a ruleset. Up to five rules can be displayed in the
rule table before a new page is created. You can use the Next
Page and Previous Page arrows to navigate between pages.
Chapter 3: Authoring Rules in Rulesets
26 Fair Isaac Corporation Confidential and Proprietary Information
Using Variables in a Ruleset
A variable is a placeholder for storing a value in a ruleset.
You can create variables of the following types:
Primitive Data Types A data type such as boolean, integer, real, or string.
Object Types Object types from the imported business object model.
After you create a variable, you can use the variable in initialization rules,
condition expressions, or action statements. In an initialization rule, you can
initialize the value of a property using a variable. In a condition, you can test
the value of a variable. In an action, you can assign a value to a property
based on the value of a variable.
Variable of Primitive Type Example
You can create a variable of a primitive type to perform a calculation based on
the values in the object properties and then use the calculated value in a rule.
For example, suppose you have MortgageApplication as the business object
model for the rule service and you want to create a variable named
IncomeAfterPayments of type real. This variable subtracts the applicant's
monthly debt from the applicant's monthly salary. totalMonthlySalary is
a property of the PersInfo sub-object type and
totalMonthlyDebtPayment is a property of the Applicant sub-object type.
You can use the following initialization for IncomeAfterPayments:
newApp.PersInfo.totalMonthlySalary -
newApp.Applicant.totalMonthlyDebtPayment
Then, you can use IncomeAfterPayments as a property in the condition
expressions and action statements for rules in this ruleset.
Variable of Object Type Example
You can create a variable of an object type when you want to create rules
with properties in a sub-object type.
For example, suppose LoanApplication is the input object type for the project.
Applicant is an object type within the LoanApplication object type. You want to
create rules with only the Applicant properties. So, you create a variable
named NewApplicant. Then, you initialize the properties in
NewApplicant so that they map to the Applicant properties.
If it is available, you can click the [Switch to advanced builder] link to launch
the Advanced Builder and initialize the values that you plan to use in the
rules. The Advanced Builder must be configured prior to RMA generation. The
initialization for NewApplicant can look like the following:
an Applicant initially
{firstName=input.Applicant.firstName,
housingRatio=input.Applicant.housingRatio,
lastName= input.Applicant.lastName,
loanAmount= input.Applicant.loanAPR }
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 27
Note In this example, input is a variable that is initialized with the
input type of the rule service.
Then, create rules with the initialized properties of NewApplicant. For
example, the property input.Applicant.firstName can be referenced
as NewApplicant.firstname.
Creating Local Variables
You can create one or more local variables that can be used by the rules in a
ruleset.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Click the arrow next to the Local Variables, Patterns and Initialization
Rule section to expand it.
5 Click the Add icon (green + sign) on the context toolbar of the variables
or patterns table.
A default entity name is added as a link to the table. The entity name is
appended with a number starting with 1.
6 Click the link in the Name column.
7 In the Name field, enter a name that is unique within the ruleset.
8 In the Type drop-down list, select the variable type.
9 In the Initialization section, enter the initial value for the variable.
■ To initialize a variable of primitive data type use the Rule Builder:
1 Click the Open Editor icon.
2 Drag a property from the Item Selector to the default group or
drag an empty field and provide a valid value.
3 Click Done.
■ To initialize a variable of object type, you need to use the Advanced
Builder.
1 Click Switch to Advanced Builder.
2 Use Structured Rule Language (SRL) to initialize the variable. For
example:
an Applicant initially
{firstName=input.Applicant.firstName,
housingRatio=input.Applicant.housingRatio,
lastName= input.Applicant.lastName,
loanAmount= input.Applicant.loanAPR }
10 Click the Save icon or the Check in icon.
Chapter 3: Authoring Rules in Rulesets
28 Fair Isaac Corporation Confidential and Proprietary Information
11 To return to the Ruleset Definition page, click the Parent View icon.
Related Links
Valid Entity Names
Rule Builder Interface
Authoring Decision Logic Using SRL
Using Patterns in a Ruleset
Use a pattern to write rules that evaluate each available object of a particular
type or each available object of a particular type in a specific array.
A pattern is a way to refer to multiple instances of a specific class or
interface. Create a class-based pattern and refer to it in the rules to evaluate
each object that matches the pattern. When a pattern is encountered in a
rule, it is treated as a shorthand notation for defining a rule for every object
that matches the pattern.
For example, suppose you have a class called Account, and have some number
of account objects, account1, account2, ..., that are available to a ruleset. You
can declare a pattern and use it in the rules. Writing a rule once is the
equivalent to writing a rule for each available object.
You can also add constraints to a pattern that limit which objects the pattern
refers to. For example, if the objects are bank accounts, you can constrain the
pattern to operate only on checking accounts.
A pattern can refer to the following:
■ All instances of a class or interface.
■ The instances of a class or interface in a specific collection.
■ The instances of a class or interface in a specific collection that meet
certain constraints.
■ The instances of a class or interface that meet certain constraints but are
not in a specific collection.
Creating Patterns
Create one or more patterns to write rules that evaluate each available object
of a particular type or each available object of a particular type in a specific
array.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Click the arrow next to the Local Variables, Patterns and Initialization
Rule section to expand it.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 29
5 Click the Add icon (green + sign) on the context toolbar of the variables
or patterns table.
6 Click the link in the Name column.
7 Select the Pattern radio button.
8 In the Name field, enter a name that is unique within the ruleset.
9 In the Type drop-down list, select the class type.
10 (Optional) Click the Save icon to save the pattern type selection.
11 (Optional) In the In collection field, if you have created a collection
containing objects of the same type that you selected from the Type
drop-down list, you can select the collection from the drop-down list.
Selecting a collection limits the pattern matching to the objects in that
collection.
12 (Optional) In the Such that field, enter a constraint clause for the
pattern using an expression that refers to the properties of the pattern
type.
a Click the Open Editor icon.
b Drag a property from the Item Selector to the default group or drag
an empty field and provide a valid value.
c Click Done.
You do not have to refer to instances (using the it operator) in the Such
that clause of a pattern. The it is optional.
The constraint can include more than one test as in this example:
theAccount.type does not exactly match "savings" and
theAccount.name is equal to "Premium"
13 Click the Save icon or the Check in icon.
14 To return to the Ruleset Definition page, click the Parent View icon.
Related Links
Valid Entity Names
Rule Builder Interface
Authoring Decision Logic Using SRL
Dynamic Objects
Dynamic objects are instances of external classes defined in functions, rule
actions, and initialization statements. Create object instances to hold known
values, intermediate results of rule processing, or as test objects while
authoring rules.
Dynamic objects are created or mapped into the rule service during rule
processing. Create a dynamic object by using a variable or property
assignment statement using the assignment (=) operator or by calling a
newInstance() method of a class.
Chapter 3: Authoring Rules in Rulesets
30 Fair Isaac Corporation Confidential and Proprietary Information
You can map dynamic objects as a result of calling a method that returns an
object or as property values of objects that you explicitly map. Dynamic
objects are available to the rules as long as there is a reference to them.
An object has a reference to it if one of the following applies:
■ It is assigned to a variable.
■ It is assigned to the property of another object.
■ It is stored in a collection.
Use dynamic objects when one of the following applies:
■ You do not know how many objects to create until rule processing occurs,
and you do not have to save the objects after processing. For example,
you might need to create a temporary account object on the basis of
information that a user provides.
■ You need to create an object to process information gathered during rule
processing. For example, you might need to create an object if the user
chooses an out-of-stock item and you want the rules to suggest another
alternative to the customer.
Create a dynamic object using one of the following options:
■ In the Rule Builder for an initialization rule or rule action, drag and drop a
class-type property, variable, or pattern to the canvas. When an
assignment statement is created, a new dynamic object is created and
assigned to the class-type property, variable or pattern. In this release, a
dynamic object of an external class type can be created only if the
external class has a zero argument constructor.
■ In the Advanced Builder editor, instantiate the object and then assign it to
an object property using Structured Rule Language (SRL).
objectName.objectPropertyName = a className initially
{ property1=value, property2=value, ... }
■ In the Advanced Builder editor, instantiate the object and then assign it to
a variable using Structured Rule Language (SRL).
variableName = a className initially
{ property1=value, property2=value, ... }
■ In the Advanced Builder editor, you can use the newInstance()
function to call a constructor to create an object of an external class using
arguments that you specify. Then assign it to an object property or
variable where the arguments must be of the same type the external class
constructor specifies.
objectName.objectPropertyName = a className initially
extClassName.newInstance(argument1, argument2, ...)
The newInstance() function lets you instantiate objects with arguments if
the class has no zero-argument constructors. You can call this function with
the appropriate arguments as part of an initialization rule or action statement.
For example:
newProduct=product.newInstance(size, name)
When a local object is declared in a ruleset or a function, only statements and
expressions within that decision entity can access or change the value of that
object. In a ruleset, to create a reference to an object without an object
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 31
reference, declare a pattern or variable of its type, and use it to write your
rules.
Related Links
Rule Builder Interface
Authoring Decision Logic Using SRL
Creating an Initialization Rule
Use an Initialization rule to create statements that assign initial values for
properties of your global objects and variables. The initialization rule is the
first rule that is evaluated in the ruleset so the initialization of property
values occurs before any rules are fired. Therefore, you usually complete the
initialization rule before you start writing the other rules. Because you can
only enter action statements in the initialization rule, patterns are not
available.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Click the arrow next to the Local Variables, Patterns and Initialization
Rule section to expand it.
5 Click the Open editor icon in the Initialization Rule section.
Alternatively, if the Switch to Advanced Builder link is available, you
can use the link to open the Advanced Builder editor to author
Structured Rule Language syntax directly into the editor.
6 In the Rule Builder interface, select a property from the Item Selector
and drag it to the dotted rectangle in the default group.
7 Enter a value for the property.
8 Repeat steps 5 and 6 for any other properties that you want to initialize.
9 (Optional) If you need to add an operator, date, or empty field, drag and
drop these elements to the statement you are creating.
10 Click Done to return to the Ruleset Definition page and save your
changes.
11 Click the Save icon or, if it exists, the Check In icon.
Related Links
Rule Builder Interface
Authoring Decision Logic Using SRL
Chapter 3: Authoring Rules in Rulesets
32 Fair Isaac Corporation Confidential and Proprietary Information
Rule Builder Interface
The Rule Builder interface provides the ability to initialize variables and
author expressions and statements using a drag and drop interface. This
interface is the default when authoring conditions and actions in rulesets. The
interface is also available in the Function editor, if the Switch to rule builder
link is available.
Based on the configuration of the template, the Rule Builder interface or the
rule instance editor is available for authoring rules in a ruleset. In some cases,
the Advanced Builder is also available.
Note There is no undo command in the Rule Builder interface to revert
the delete operation. However, you can click Cancel to discard unsaved
changes.
The Rule Builder interface has four main components:
Figure 3: Rule Builder Interface
Item Description
1 The Item Selector displays the entities associated with your object model.
This could be parameters or variables and, in the case of rulesets, patterns. It
includes a search field and a toolbar with options to add operators, dates,
empty fields, or dynamic objects that you can use to create more complex
expressions. These are the operations that you can perform with the toolbar
commands:
■ Drag and drop an operator and an empty field to add it to an expression.
■ Drag and drop a date to replace an existing date field or one that may have
been accidentally deleted.
■ Drag and drop an empty field to replace an existing field or one that may
have been accidentally deleted.
■ Drag and drop a dynamic object to replace an existing field or one that may
have been accidentally deleted. When the dynamic object is dragged, the
fields where the object can be used are highlighted. (Dynamic objects are
not applicable when building rule conditions or creating constraints in the
"Such that" field in the Pattern editor.)
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 33
Item Description
■ Drag and drop a builtin-function.
■ Drag and drop another functional.
■ Drag and drop a return statement.
2 The Rule Builder toolbar displays commands that you can use to author
decision logic. These are the operations that you can perform with the toolbar
commands:
■ (For condition expressions only.) Group expressions when you need to
specify the order of operations for mathematical expressions. Click the
outline of the first expression and then press Ctrl before clicking on the
outline of the second expression.
■ (For condition expressions only.) Ungroup expressions. Click on the selector
(see Item 4) for the expressions and then click the Ungroup command.
■ Delete an expression or a group of expressions.
■ Copy and paste an expression or a group of expressions.
3 The default group appears on the right side. It displays the object and local
variable properties that you drag and drop from the Item Selector. In rule
conditions, the default group can also contain subgroups.
4 A selector is a vertical border on the right side on a date, field, group, or
operator in the default group. When you click the selector of an item, the Rule
Builder interface highlights the selector and the rectangle that encompasses
the selected item.
Note To change the order of the expressions, use the selector to drag and drop
an expression or a group of expressions to another location.
The Advanced Builder provides an alternative interface where you can
create rules using Structured Rule Language (SRL). You can use the
Advanced Builder when you need to initialize a variable that is an object
type from the imported business object model. Based on the template, the
Advanced Builder can be used to create statements or to initialize a variable
that is an object type from an imported business object model.
Related Links
Creating Local Variables
Creating Patterns
Dynamic Objects
Creating an Initialization Rule
Defining Rules
Creating Rule Conditions
Creating Rule Actions
Chapter 3: Authoring Rules in Rulesets
34 Fair Isaac Corporation Confidential and Proprietary Information
Creating Rules
Create one or more rules for the ruleset.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Scroll down to the Rules section.
5 Click the Add icon to add a rule to the ruleset.
A default rule name is added as a link to the Rules table. The default rule
name is rule appended with a number starting with 1. You can change the
rule name when you define the rule.
6 (Optional) Repeat step 5 to create additional rules.
7 Click the Save icon or, if it exists, click the Check In icon.
After you create a rule, click the rule name to define it.
Related Links
Valid Entity Names
Copying and Pasting Expressions or Statements
Within Rulesets
You can copy and past a condition expression or an action statement from one
rule to another rule in the same ruleset.
1 On the Rule Definition page, select the condition expression or the group
selector for the condition group or action statement. Then, click the Copy
icon.
The rule does not need to be enabled for editing when you copy an
expression or statement.
2 Click the Parent View icon.
3 In the Rules section, click the name of the rule where you want to paste
the expression, group, or statement.
4 Perform one of the following operations to enable the rule for editing:
a If the Check out icon appears on the toolbar, click the icon.
b If the Check out icon is not on the toolbar, click the Edit icon.
5 Based on where you want to paste the content, click the Open editor icon
in the Conditions or Actions section.
6 Click the group selector for the group where you want to add your
expression, group, or statement. Then click the Paste icon.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 35
7 Click Done.
8 Click the Save icon.
Defining Rules
The Rule Definition page defines each rule in the ruleset.
It contains the following fields and sections:
Rule name A unique rule name. The name must be unique in the ruleset. A
valid name consists of one or more letters (A-Z, a-z), digits (0-9),
and underscores (_). It cannot contain spaces, punctuation marks,
or special characters, such as $ or %.
Effective
Date
(Optional) A date range. You can enter an effective from and to
date using the MM DD, YYYY format. Alternatively, you can use the
calendar widget in the Effective from and To fields to select dates.
All values for effective dates are inclusive. For example, if you
specify an effective date to be from ‘October 1, 2016’, the rule will
be in effect on October 1, 2016.
Description (Optional) A description for the ruleset.
Conditions A condition consists of one or more condition expressions organized
into one or more groups. You can use the Rule Builder or the
Advanced Builder editor to create condition expressions.
Actions An action consists of one or more action statements. You can use
the Rule Builder or the Advanced Builder editor to create action
statements.
Related Links
Rule Builder Interface
Authoring Decision Logic Using SRL
Rule Conditions in a Ruleset
Each rule in a ruleset must have a condition. A condition consists of one or
more condition expressions organized into one or more groups. A rule is not
complete until you create a corresponding rule action for a condition.
By default, condition expressions are added to the default group in the Rule
Builder interface. When you add more than one condition expression to a
group, the condition expressions can be joined by an AND or an OR operator.
You can create a subgroup after you have at least two condition expressions
in the default group. Up to two levels of grouping are allowed in a condition
in addition to the default group that contains all condition expressions.
Chapter 3: Authoring Rules in Rulesets
36 Fair Isaac Corporation Confidential and Proprietary Information
Figure 4: Example of Grouping Levels
In this example, you see two groups of condition expressions in the default
group joined by an OR operator. Therefore, if one condition is true, then the
action is executed.
Within each group of condition expressions there are condition expressions
joined by an AND and at least one set of condition expressions that are joined
by an AND that test a range of values.
The first condition is true when the following criteria is met:
■ LoanAppObj.numOfBadDebts < 5
■ LoanAppObj.Married = false
■ LoanAppObj.income >6000 AND LoanAppObj.income <= 8000
The second condition is true when the following criteria is met:
■ LoanAppObj.numOfBadDebts < 5
■ LoanAppObj.Married = true
■ LoanAppObj.spousalincome >2000 AND LoanAppObj.spousalincome< 3000
■ LoanAppObj.income >4000 AND LoanAppObj.income <= 5000
Related Links
Valid Values for Properties
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 37
Creating Rule Conditions
Use the Rule Builder or the Advanced Builder editor to author one or more
expressions for a rule condition. The Rule Builder offers a structured way to
author rules, while the Advanced Builder editor allows you to write
expressions using Structured Rule Language (SRL) constructs.
These instructions explain how to create rule conditions with the Rule Builder.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 In the Rules section, click on the rule name to open the Rule Definition
page.
5 Click the Open editor icon in the Conditions section.
Alternatively, if the Switch to Advanced Builder link is available, you
can use the link to open the Advanced Builder editor to author
Structured Rule Language syntax directly into the editor.
6 Select a property or built-in function from the Item Selector and drag the
property to the default group. As you drag the property, a solid rectangle
replaces the dotted rectangle around any field where it is valid to add the
property.
After you have successfully added a property to the default group, you
see an appropriate list of operators for that data type and an empty field
or a drop-down list that you can use to enter or select a value.
7 Repeat step 6 to add additional properties to your default group.
When you add condition expressions to the default group, each
expression is joined to the other expression with an AND operator.
However, you can click on the AND operator to change it to an OR
operator.
8 When you have completed your condition, click Done.
9 On the Rule Definition page, click the Save icon or, if it exists, click the
Check In icon.
10 To return to the Ruleset Definition page, click the Parent View icon.
Related Links
Rule Builder Interface
Authoring Decision Logic Using SRL
Chapter 3: Authoring Rules in Rulesets
38 Fair Isaac Corporation Confidential and Proprietary Information
Grouping Condition Expressions in the Rule Builder
Group condition expressions to test a range of values or to evaluate the group
of expressions as a block. You can create a subgroup after you have at least
two condition expressions in the default group.
1 In the Rule Builder interface, click on the outline of the first expression
and then press Ctrl before clicking on the outline of the second
expression.
A yellow outline appears around each expression you select.
2 Click the Group/Add Parenthesis icon from the editor toolbar.
By default, expressions are grouped with an AND operator icon.
3 (Optional) To change the AND operator icon to an OR icon, click the AND
operator icon.
Rule Actions in a Ruleset
A rule action consists of one or more action statements that assign a value to
a property as a consequence of a condition expression evaluating to true or
false. Action statements are fired from the top to bottom.
Note If there is more than one action statement that assigns a value to a
property, the last value assignment overwrites any assignment that was
previously made.
Related Links
Valid Values for Properties
Creating Rule Actions
Use the Rule Builder or the Advanced Builder editor to author one or more
statements for a rule action. The Rule Builder offers a structured way to
author rules, while the Advanced Builder editor allows you to write
statements using Structured Rule Language (SRL) constructs.
A rule action consists of one or more statements that do one or more of the
following:
■ Modify the values of object properties.
■ Call functionals.
■ Invoke built-in functions.
■ Create new objects in working memory.
■ Delete dynamic objects from working memory.
■ Invoke Java methods on Java objects.
■ Return a value. (A rule can only return a value if the ruleset has a return
type.)
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 39
In the Rule Builder, when you drag and drop a return statement, it
automatically appears as the last statement in an action. In the Advanced
Builder, it must be the last one in the sequence of statements in the action.
Note If you need to write complex statements, such as ones involving
loops or nested conditions in an action statement, use the Advanced
Builder editor.
1 Locate the ruleset in the Explore pane or the Project Explorer.
2 Click the ruleset to open it in the editor.
3 Perform one of the following operations to enable the ruleset for editing:
■ If the Check Out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 In the Rules section, click on the rule name to open the Rule Definition
page.
5 Click the Open Editor icon in the Actions section.
Alternatively, if the Switch to Advanced Builder link is available, you
can use the link to open the Advanced Builder editor to author
Structured Rule Language syntax directly into the editor.
6 Select a property, functional, built-in function or a built-in construct from
the Item Selector and drag it to the default group.
7 Enter the required values to complete the statement.
8 When you have finished the action statements, click Done.
9 On the Rule Definition page, click the Save icon or, if it exists, click the
Check In icon.
Until you save the rule, an asterisk (*) remains displayed next to the file
name in the Explore pane.
10 To return to the Ruleset Definition page, click the Parent View icon.
Related Links
Authoring Decision Logic Using SRL
Rule Builder Interface
Validation
The Rule Builder interface displays immediate feedback when an expression
or a statement is invalid. It ensures that the properties that you add to the
right side of the expression or statement are valid for the data type expected
by the left side and its operand.
You will notice the following behavior when you build expressions and
statements with the Rule Builder:
■ If an invalid entry is made in a field or the field is empty, a thin red line
appears around the area where the problem exists. If you hover over the
area displaying an error, a tooltip displays describing why the expression
Chapter 3: Authoring Rules in Rulesets
40 Fair Isaac Corporation Confidential and Proprietary Information
is not valid. The red line persists until you enter a value with the correct
data type.
■ While dragging a property to the default group, if you do not see the solid
outline around the target location or your cursor is displayed as a Not
Allowed icon, you are prevented from adding the property to your
expression. This is usually because the property is read-only or what you
are trying to add is not a property.
Note Read-only properties are allowed in condition expressions or in
the right side of an assignment statement.
■ When you have an object or sub-object in the Item Selector, you will not
be able to drag the entire object to the default group. Instead, expand the
object to display its properties, then drag and drop the properties to the
default group.
Valid Values for Properties
The data type of a global object, variable, or local variable property
determines the types of values that are valid in an initialization expression,
condition expression, or action statement.
The format of the value you can enter in enforced by the system for both
expressions and statements.
Property Type Allowed Values
Additional Operators and
Values
boolean ■ true (default)
■ false
none
date Use the calendar widget to
select a date or enter a date in
the short, medium, long, or full
format of the display locale.
For example:
■ 9/30/2016 (short)
■ Sep 30, 2016 (medium)
■ September 30, 2016 (long)
■ Monday, September 30,
2016 (full)
The system automatically
reformats the date to the
medium format of the display
locale. However, if you enter a
date such as Sept 29, 2016,
you see a validation error.
Depending on the first literal
value, you can use one of the
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
duration A value that defines an
amount of time in minutes,
Depending on the first literal
value, you can use one of the
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 41
Property Type Allowed Values
Additional Operators and
Values
hours, days, months, and
years. For example:
■ 7 days
■ 2 months
■ 1 hour
■ 15 minutes
If you define an amount of time
as a number of weeks, the
weeks are converted to the
equivalent number of days.
If you define an amount of time
as a number of seconds and
the value is less than 60
seconds, there is no change.
However, if the value is equal
to or greater than 60 seconds,
it will be converted to the
number of minutes and
seconds.
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
If you want to specify a
duration of time such as a
number of hours, you can use
a duration property type with a
time value and a minus (-) sign
with another time value. For
example:
■ object.durationProperty is
equal to 9:00:00PM -
9:00:00AM for a duration of
12 hours
■ object.shippingTime is equal
to 9:00:00AM - 6:00:00PM
for a duration of -9 hours.
integer A numeric value that is whole.
For example:
■ 1000
■ -1000
Depending on the first literal
value, you can use one of the
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
■ / (divide)
■ div (division with integer
values only)
■ mod (modulo)
You can use either / or div with
integer values depending on
the value you want to return.
■ If you want to return an
integer quotient, use div. For
example: 17 div 5 returns 3.
■ If you want to return a
quotient with a fractional,
use /. For example: 17/5
returns 3.4
money A numeric currency value that
is formatted based on the
conventions of the display
locale along with the ISO code
Depending on the first literal
value, you can use on the
Chapter 3: Authoring Rules in Rulesets
42 Fair Isaac Corporation Confidential and Proprietary Information
Property Type Allowed Values
Additional Operators and
Values
or symbol. The system
automatically reformats the
value to display the ISO code
before the numeric value. It
also displays separators based
on the conventions of the
display locale. For example:
■ USD 12.50
■ USD 12,000
You see a validation error if
you enter a numeric noncurrency
value such as 12 or
12.5. Enter $12 and the
system will format it as USD
12.
Note A parenthesized value,
such as (USD 40), is
considered a negative value.
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
■ / (division)
■ div (division with integer
values only)
■ mod (modulo)
real A numeric value that contains
decimal places. For example:
■ 1000.1
■ -1000.1
Depending on the first literal
value, you can use on the
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
■ / (division)
■ div (division with integer
values only)
■ mod (modulo)
time A time value that is expressed
in hours, minutes and
seconds.
Depending on the first literal
value, you can use on the
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
timestamp A digital record of an
occurrence of an event on a
specific time, hours, minutes,
seconds, on a given date.
Depending on the first literal
value, you can use on the
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 43
Property Type Allowed Values
Additional Operators and
Values
following operators to define a
value for this property type:
■ + (plus)
■ - (minus)
■ * (multiply)
object A variable of type object
cannot be used in a rule and
cannot be dragged and
dropped.
none
string Any value you enter for a
string property is treated as a
string.
Note You do not need to enter
single or double quotes for
string values.
You can use the equality and
relational operators for this
property type including:
■ is equal to
■ is not equal to
■ contains text
■ is contained within text
■ is not contain within text
■ is equal to (ignoring case)
■ is not equal to (ignoring
case)
■ contains text (ignoring case)
■ is contained within text
(ignoring case)
■ is not contain within text
(ignoring case)
Related Links
Rule Conditions in a Ruleset
Rule Actions in a Ruleset
Chapter 3: Authoring Rules in Rulesets
44 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 4
Authoring Rules in Decision Tables
Use a decision table to author rules when the rules are regular, meaning that
they share the same types of condition and action expressions.
A decision table is a tabular presentation of a ruleset. A decision table is an
entity designed to accommodate a large number of rules that evaluate data
against the same object properties, where the primary differences among the
rules are the actual condition and action values.
In a decision table, you only edit the condition and action expression values
for each rule. The keywords, if and then and any required punctuation are
automatically inserted in the underlying rules.
For example:
if (condition)
then {
action.
}
A decision table may or may not already have condition and action expressions
present when you open it for the first time. What you see depends upon how
the decision table was created in the project prior to generating the RMA.
To write decision table rules, you do the following:
■ Edit the values in any existing condition or action expressions.
■ Insert additional condition and/or action expressions in the decision table
and then edit the values.
Depending upon the decision table layout, inserting rows or columns is similar
to adding new rules to the decision table ruleset. Conversely, deleting one or
more rows or columns may delete several rules from the decision table
ruleset. To add a rule to a Single-axis (Columns) table, add a row to the table.
To add a rule to a Single-axis (Rows) table, add a column to the table. In a
Double-axis table, the number of new rules added is equivalent to the number
of new cells added in the action matrix.
In this example, if a column is added before or after the Excellent column, two
rules are added.
Fair Isaac Corporation Confidential and Proprietary Information 45
Figure 5: Double-axis Decision Table with Six Rules
If a row is added to the bottom of the table, three rules are added. If the
Excellent column is deleted, two of the rules are deleted because two action
cells are removed. Conversely if one of the rows is deleted, three rules are
deleted because three action cells are removed.
Decision Table Layout
Decision tables contain rows and columns that you can use to represent rules.
There are three decision table layout styles. The type that you have access to
depends upon how the decision table was created in the project prior to
generating the RMA.
There are three possible layout styles:
■ Single-axis (Columns)
■ Single-axis (Rows)
■ Double-axis
Single-axis (Columns) decision table
In a Single-axis (Columns) table, each column is a group of condition or
action expressions that are based on the same object property. Each row is a
rule in the decision table.
In this example, the conditions are in columns A - C and the action is in
column D. By default, the condition and action columns contain different
coloring.
Figure 6: Single -axis (Columns) Decision Table
For example, the first rule in the table is "If the applicant's total income is
between $4,000 and $60,000, they have roll over balances from another
credit card, and their credit history is fair, then they are offered the standard
card type."
Chapter 4: Authoring Rules in Decision Tables
46 Fair Isaac Corporation Confidential and Proprietary Information
Single-axis (Rows) decision table
In a Single-axis (Rows) table, each row is a group of condition or action
expressions based on the same object property. Each column is a rule in the
decision table.
In this example, the conditions are in rows 1 - 3 and the Action is in row 4.
Figure 7: Single -axis (Rows) Decision Table
The first rule reads the same as the one used in the Single-axis (Columns)
example. Only the visual layout changed.
Double-axis decision table
In a Double-axis decision table, at least one row and one column are
conditions. The cells in the matrix of the table are the actions. A Double-axis
decision table can have only one action expression per rule.
In this example, Total Income, Rolling Over Balances, and Credit History
represent condition expressions and Card Type represents the action
expression.
Figure 8: Double-axis Decision Table
The first rule reads the same as the one used in the other examples. Again,
only the visual layout changed.
Creating Decision Tables
Create a decision table to author a set of rules that will be evaluated based on
the data passed into the rule service.
1 In the Project Explorer, open the New drop-down menu.
2 Select Custom Entity.
3 Expand the project folder containing the template.
4 Select the template.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 47
5 Enter a unique name in the Name field.
6 Press Create.
When you open a decision table, the Decision Table editor page appears.
From the Decision Table editor page, you can define the condition and
action expressions.
Related Links
Valid Entity Names
Editing the Decision Table SRL Name
If the Decision Table field is visible in the decision table, you can edit the
SRL name. To reference a decision table from a task in a decision flow or to
call it from another decision entity, use the SRL name.
In this case, the name of the decision table ruleset is
loanQualificationTable_Instance:
if newApp.totalIncome is greater than 50,000
then newApp.qualifiesForLoan = apply loanQualificationTable_Instance.
A valid name consists of one or more letters (A–Z, a–z), digits (0–9), and
underscores (_). It cannot contain spaces, punctuation marks, or special
characters, such as $ or %.
1 Locate the decision table in the Explore pane or the Project Explorer.
2 Click the decision table to open it in the editor.
3 Perform one of the following operations to enable the decision table for
editing:
■ If the Check Out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 In the Decision Table field, enter a unique name.
5 Perform one of the following operations to register the change:
■ Press Tab.
■ Click anywhere in the Decision Table editor.
■ Click the Save icon.
Tip If the focus is in the margin of a decision table, you can use the
keyboard shortcut, F2, to move the focus to the Decision Table field.
Editing Rules in a Decision Table
After the structure of the decision table is set, you can create any number of
rules.
Inserting or deleting a condition or action expression modifies the
construction of the rules. When you add a condition or an action expression,
Chapter 4: Authoring Rules in Decision Tables
48 Fair Isaac Corporation Confidential and Proprietary Information
the expression is added to each rule. Likewise, deleting a condition or action
expression deletes an expression from each rule.
In this figure, there are two condition expressions (Deductible column and
Network Member column) and one action expression (Approved Claim Percent
column).
Figure 9: Decision Table with Two Conditions and One Action
The decision table defines the following rules:
■ If the deductible is 2,000 USD for a network member, then the claims are
paid at 90%.
■ If the deducible is 2,000 USD for a non-network member, then the claims
are paid at 75%.
If another condition expression (ServiceType column) is added to the decision
table, a condition expression is added to each existing rule.
Figure 10: Decision Table with One Additional Condition
The decision table now defines the following rules:
■ If the deductible is 2,000 USD for a network member and the service type
was an office visit, then the claims are paid at 90%.
■ If the deducible is 2,000 USD for a non-network member and the service
type was a call for an ambulance, then the claims are paid at 75%.
Inserting Condition and Action Expressions
Each condition and action expression is based on an object property. Insert a
condition or action and select the object property that you want used in the
expressions.
This table shows the commands used to add condition or action expressions to
each type of decision table layout.
Table 4: Condition and Action Expressions
Decision Table Layout Command Names
Single-axis (Columns) Insert New Column or Insert New Row
Single-axis (Rows) Insert New Column or Insert New Row
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 49
Table 4: Condition and Action Expressions (continued)
Decision Table Layout Command Names
Double-axis
Only conditions are added for this table type
because it can have only one action.
In the Context menu the commands are Insert
New Row (above the column headers) or
Insert New Column (adjacent to one of the
existing condition columns). On the Decision
Table editor toolbar, the commands are Insert
New Condition Row or Insert New Condition
Column.
1 Locate the decision table in the Explore pane or the Project Explorer.
2 Click the decision table to open it in the editor.
3 Perform one of the following operations to enable the decision table for
editing:
■ If the Check Out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Depending upon the layout of the decision table, perform one of these
operations:
■ Select the column or row nearest to the location where you want to
add the condition or action. Click the arrow to open the context menu
and select Insert Column or Insert Row.
■ Click the Insert Column icon on the Decision Table editor toolbar.
■ Click the Insert Row icon on the Decision Table editor toolbar.
To add the first condition row to a Double-axis decision table, select the
header row and then use one of the Insert Row commands.
a In the Column Type or Row Type field, select Condition or Action.
In the Column Type field, select Condition or Action.
b (Optional) In the Search field, enter the name of an object property
and press Enter. The search is case-sensitive. If the property is
found, the object type containing the property is highlighted.
c In the Property Picker, select an object property on which to base
the condition or action expression. In the Property Picker, select
one of the following:
■ An object property on which to base the condition or action
expression.
■ A customized condition or action expression, if available.
By default, the name of the selected property appears in the Display
Name field and becomes the column header.
5 (Optional) If an object property was selected in Step 4c, enter a label for
the column or row header in the Display Name field.
After a condition or action is added, you cannot change the object
property on which it is based. If you decide that you want the condition
or action based on a different object property, delete the condition or
action and add another one using the desired object property.
Chapter 4: Authoring Rules in Decision Tables
50 Fair Isaac Corporation Confidential and Proprietary Information
6 Select one of the commands to specify where to place the new column or
row.
7 (Optional) Click Insert Column icon to add another column to the end of
the table. Alternatively, select the column nearest to the one you want to
add and then click the command or select the command from the context
menu.
8 Click the Save icon, or if it exists, click the Check In icon.
Editing Rule Names
Every decision table rule has a name in the decision table ruleset. If the rule
names are visible, they appear in the Rule Id column in a Single-axis
(Columns) table or in the Rule Id row in a Single-axis (Rows) table. In some
cases, the rule names may be editable.
This is an example of how the Rule Id column appears in a Single-axis
(Columns) table:
Figure 11: Rule Id in a Decision Table
If a rule is cut and pasted from one row (or column) to another, the rule name
and the number remain unchanged. However, if a rule is copied and pasted, it
is assumed that this is a new rule and the rule number is incremented by 1.
Note This functionality is not applicable for Double-axis decision tables.
The Rule Id row is available if the Decision Table Template includes this
functionality.
1 Perform one of the following operations to enable the decision table for
editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the Check out icon is not on the toolbar, click the Edit icon.
2 Double-click in the desired cell in the Rule Id column or row.
3 Edit the rule name.
Note Each rule name must be unique.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 51
4 Perform one of the following operations:
■ Press Tab to move to the next cell in the row.
■ Press Enter to move to the cell below.
■ Change the focus to another cell.
5 Click the Save icon, or if it exists, click the Check In icon.
Editing Condition Cells Enabled for Multiple Values
You can edit the values for condition cells that accept multiple values. A
condition cell shown with a border around the entry is one that accepts
multiple values.
The number of values allowed in a decision table cell is pre-set by your
technical user. If the number of values in a condition cell exceeds the
boundaries set by the technical user, an error message is thrown in the RMA.
1 Locate the decision table in the Explore pane or the Project Explorer.
2 Click the decision table to open it in the editor.
3 Perform one of the following operations to enable the decision table for
editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Double-click in the cell. By default, the first item in a list appears as the
new value.
5 Perform one of the following operations:
■ Press Enter to accept the default value.
■ Make another selection and press Enter.
■ Erase the default entry and enter the first letter(s) of the item you
want to select and then press Enter.
6 Repeat steps 4 - 5 as necessary.
7 (Optional) Click in the left-hand side of the cell and move the values in
the order in which you want them to appear.
8 (Optional) To delete a value, select it, and click the Delete icon.
9 (Optional) Click the Save icon or, if it exists, click the Check in icon.
Chapter 4: Authoring Rules in Decision Tables
52 Fair Isaac Corporation Confidential and Proprietary Information
Changing the Expression Format in a Decision Table
Cell
Blaze Advisor RMA includes several expression formats for numeric data types.
You can select from among several expression formats for object properties
with numeric data types. For example, you could select > integer value to
indicate that the property is less than a particular integer value.
1 Locate the decision table in the Explore pane or the Project Explorer.
2 Click the decision table to open it in the editor.
3 Perform one of the following operations to enable the decision table for
editing:
■ If the Check out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Perform one of the following operations to open the context menu:
■ Click in the cell and click the down arrow.
■ Click in the cell and press Ctrl + Down (directional arrow).
5 Under Cell Formats, select an expression. Alternatively, using your
keyboard, press the number next to the expression.
6 Double-click in the cell to edit the value(s).
7 Click the Save icon or, if it exists, click the Check in icon.
Cutting, Copying, and Pasting Rows and Columns
You can insert a row or column with copied content in the decision table. The
paste operation does not replace an existing row or column.
The Cut, Copy, and Paste commands are available on the Decision Table editor
toolbar and from the context menu. Using keyboard shortcuts, you can select
multiple rows or columns to be cut or copied and pasted as long as the rows
or columns are contiguous.
You cannot copy or cut any rows or columns that are fixed by design. When
fixed rows or columns are selected, the Cut, Copy, and Paste commands are
disabled.
Note Copying and pasting individual values from a decision table to
another application such as Microsoft Excel or a text editor is supported;
however, copying and pasting rows, columns, or ranges of values is not
supported.
Related Links
Decision Table Keyboard Shortcuts
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 53
Copying and Pasting Content in Decision Table Cells
Although there are some restrictions, you can copy the contents of an entire
cell or copy a value and then paste it into another cell.
The Copy and Paste commands on the Decision Table editor toolbar are for
copying and pasting condition or action columns and rows. Use the
commands on the Context menu or keyboard shortcuts to copy and paste
content in a decision table cell.
The following restrictions apply when you copy and paste content in a
decision table cell:
■ Copying and pasting the entire contents of a cell is applicable only to
cells that are based on a same data type and same expression type, such
as a condition or action. The contents include not only the value but the
expression format type.
For example, if you copy a condition cell containing >6000 and paste it
into another condition cell containing =5000, the =5000 is overridden
with >6000. Not only has the cell value changed, but the expression
format has changed too. For cells based on a string type, if the value was
selected from a list, you can only paste the cell content to other cells in a
condition or action column or row that use the same list.
■ Copying and pasting a value is applicable only when the values are of a
compatible type. If you copy and paste a value that is not of the correct
type, a warning message appears stating that value is invalid.
Tip To see if a cell will accept a pasted value, click in the cell and open
the context menu to see if the Paste command is enabled.
Related Links
Decision Table Keyboard Shortcuts
Rule Profiling with Sample Data
Use rule profiling to verify that the decision table generates the expected
results based on a sample dataset.
When rule profiling is run, the data in the dataset is evaluated by the
condition expressions. The amount of data that matches the conditions is
displayed in the Decision Table editor as a percentage or numeric count of
the data. You can run the rule profiler as needed or use real-time profiling to
provide feedback as the values are edited in the decision table.
The dataset file must be a .csv (comma-separated values) file. You can create
your own dataset in an external application, such as text editor, or you can
use the Rule Profiling menu to generate a sample CSV dataset file and then
modify the values as required.
Chapter 4: Authoring Rules in Decision Tables
54 Fair Isaac Corporation Confidential and Proprietary Information
Real-time Profiling
By default, rule profiling occurs in the background while the decision table is
edited.
As changes are made to the values in the condition cells, the profiling results
are updated in the decision table to reflect those changes. Real-time profiling
is triggered by modifications such as changing cell values or expression
formats or by adding and deleting rules.
If you generate a report while the real-time results update feature is enabled,
the results in the report reflect the current state of the decision table.
Note Unless you save the decision table before generating the report, the
current state may not be the saved state.
You can disable real-time profiling using the Set Display Options dialog.
Open the Set Display Options dialog by clicking the down arrow next to the
Rule Profiling icon on the Decision Table editor toolbar. If real-time profiling
is disabled, rule profiling continues and the current results remain visible in
the decision table. However, rule profiling results are not displayed for any
new rows added to the decision table and the rule profiling results that were
already displayed are not updated based on any edits to the decision table.
Dataset Requirements
The dataset used for profiling must be a .csv (comma-separated values) file
that conforms to specific requirements. You can create your own dataset in an
external application or generate a sample dataset and modify the values.
The CSV file must have the following characteristics:
■ The data must be listed in columns, regardless of the layout of the
decision table. Each row is a set of condition values for one rule.
■ The first row in the file must contain the condition labels.
■ The number of condition labels in the file must be at least equal to the
number in the decision table.
■ Each subsequent row in the file must contain the exact same number of
values. The only exception is for a string value, which can have an empty
value.
■ Each column must contain data of the correct data type for the
corresponding condition column or row in the decision table.
■ If a condition expression can contain multiple values, add a row for each
possible value. This is an example of a condition expression that can
contain more than one value.
if ((claim.serviceType ="Office_Visit") or (claim.serviceType
="X_Rays")) or (claim.serviceType ="FollowUp_Visit"))
This is how the values might appear in the dataset. The only change in
each row is another possible value for the Service Type condition.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 55
■ The encoding for the CSV file must be Unicode (UTF-8).
When a dataset is attached, the headers in the first row of the CSV file are
compared to the condition labels in the decision table. If there are sufficient
matching headers in the dataset, these headers are mapped to the
corresponding condition labels and rule profiling is ready to run. The data
columns in the dataset can be in any order because the mapping is based on
the condition labels specified in the dataset’s header row. This allows you to
use data where the columns in the data file may not be in the same order as
the decision table.
If the dataset does not contain sufficient matching headers and mapping is
incomplete, an error message is displayed. If the dataset contains more data
columns than the number of condition labels in the decision table, the extra
data columns are ignored as long as there are sufficient matching headers.
The number of condition headers in the dataset must match the number in
the decision table at the time the profiler is run. Attaching a dataset then
altering the decision table structure, such as removing or adding an optional
condition cell group, will cause the dataset to become detached. If the
dataset is detached, update it, and attach it again.
Related Links
Decision Table Profiling
Creating a Sample Dataset
You can create a sample dataset based on the current decision table. It
shows the correct format for the dataset and includes a column header and
column of data for each condition in a decision table. After the sample
dataset is generated, you can modify the values as required.
1 Click the Rule Profiling icon to open the Rule Profiling menu.
2 Select Generate Sample Data.
3 Open or save the file.
If you do not save the file to a specific directory, it is automatically saved
to Users\<yourUserName>\Downloads
The file name is FileName_Dataset.csv. The sample dataset file has
_Dataset appended to it to distinguish it from the FileName.csv file
generated using the Export Decision Table command.
Chapter 4: Authoring Rules in Decision Tables
56 Fair Isaac Corporation Confidential and Proprietary Information
Running Rule Profiling
To run the rule profiler, attach a dataset to run against the conditions in the
decision table. Only one dataset can be attached to a decision table. The
dataset remains attached until you attach another valid dataset or you close
the Decision Table editor.
1 Click the Rule Profiling icon.
2 Select Run Profiling Data.
3 Click Browse and navigate to a dataset.
4 Select the file and click Open.
If you select a file type other than a .csv file or if the file cannot be
mapped correctly, the Run sample data dialog displays an error message.
Click the Browse button again and select another dataset file.
5 Click Run to start profiling.
The Run option is not enabled unless a valid dataset is attached and all of
the headers are mapped to corresponding condition columns/rows in the
decision table.
The profiler displays a status message during profiling and then displays the
results in the decision table in one or more of the following formats: bar chart,
numeric count, or percentage. The last valid dataset is retained until a new
valid dataset is attached to the decision table or the Decision Table editor is
closed.
Note Attaching a dataset and then removing or adding a condition
detaches the dataset. If a dataset becomes detached, update the dataset,
and attach it again.
Profiling Results Display Options
Rule profiling results are displayed based on the decision table type and the
display options.
There are three different options for displaying the profiling results:
Bar chart The length of the yellow bar is proportional to the percentage of data
that matches the conditions in a rule.
Percentage The percentage of the total number of value sets in the dataset that
match the conditions. A value set is equal to one row of data in the
dataset.
Count The total number of value sets in the dataset that meet the conditions.
The bar chart and percentage are the default settings, as shown in this
example of a single-axis (columns) decision table:
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 57
Figure 12: Decision Table with Rule Profiling Results
You can configure the display options to include the count (the total number
of value sets in the dataset that meet the conditions) in the Set Options
Display window.
All three types of decision tables display the profiling results, but in a slightly
different way.
Table 5: Display Results Based on Layout
Decision Table Type Display Results
Single-axis (Columns) Rule profiling results are displayed in a separate frozen
Matches column next to the row index column.
Single-axis (Rows) Rule profiling results are displayed in a separate frozen
Matches row below the column index row.
Double-axis Rule profiling results are displayed within the action cells.
Related Links
Setting Rule Profiling Options
Chapter 4: Authoring Rules in Decision Tables
58 Fair Isaac Corporation Confidential and Proprietary Information
Rule Profiling Report
The report includes columns for the Rule ID and the corresponding count and
percentage results. All three columns are displayed by default and can be
hidden or displayed as desired using the check boxes to the left of the table.
Figure 13: Rule Profiling Report
The Rule ID column displays the rule index from the decision table plus the
user-defined rule label, if the rule label is visible in the decision table.
Otherwise it simply refers to the rule index. The Rule ID column displays the
rule index from the decision table. The columns display the corresponding
profiling results in descending order. By clicking the white up or down arrow
in a column, you can sort the results in ascending or descending order. The
current sort column and order is indicated by a blue arrow.
The report display varies depending upon the decision table layout:
■ For a Single-axis (Columns) table, the Rule ID column shows the row
index number. For example: 1, 2, 3, . . ., 10, 11, 12, . . ., 100, 101, and
so on.
■ For a Single-axis (Rows) table, the Rule ID column shows the column
index letter. For example: A, B, C, . . ., X, Y, Z, AA, AB, AC, and so on.
■ For a Double-axis table, the Rule ID column shows a letter plus a number.
For example: A1, A2, A3, . . ., A10, A11, . . ., B1, B2, and so on.
Note When the Decision Table editor is closed, the attached dataset file
or related profiling information is not saved.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 59
Generating Rule Profiling Reports
You can generate a report containing the rule profiling results after profiling
is run on a decision table.
1 Click the Rule Profiling icon.
2 Select Generate Report.
3 From the Show entries drop-down list, select the number of entries to
include in the report.
4 Select the Rule ID, Count and Percent check boxes to hide or show
those columns of data in the report.
5 (Optional) Click a column header to sort the report data. You can only
change the sort order for one column at a time.
6 Click any of the navigation buttons at the bottom of the report (First,
Next, etc.) to display the data.
7 Click the Close button in the upper right corner to close the report.
Setting Rule Profiling Options
Set the rule profiling options in the Set Display Options window. The
selections made in this window are persisted only until the Decision Table
editor is closed.
1 Click the Rule Profiling icon.
2 Select Set Display Options.
3 (Optional) Select or clear Enable/disable real-time results updates.
4 (Optional) Select or clear Show charts.
5 (Optional) Select or clear Show percentage. This option displays the
percentage of the total number of value sets in the dataset that match
the conditions.
6 (Optional) Select or clear Show count. This option displays the total
number of value sets in the dataset that match the conditions.
7 Click Save to update the display setting.
Related Links
Real-time Profiling
Chapter 4: Authoring Rules in Decision Tables
60 Fair Isaac Corporation Confidential and Proprietary Information
Enabling and Disabling Rule Profiling
Rule profiling is enabled by default. When you disable rule profiling, the
profiling results are removed from the decision table. The current dataset
remains attached and you can still generate and view the profiling report.
1 Click the Rule Profiling icon.
2 Select one of the following:
■ Disable Profiling: The profiling results are cleared from the decision
table and the menu item toggles to Enable Profiling.
■ Enable Profiling: The profiler is run again using the attached dataset
(.csv file), and the results are displayed in the decision table. The
menu item toggles back to Disable Profiling.
Filtering Rules in Decision Tables
In the Decision table editor, you can apply filters to the columns to control
which rules are displayed.
You will notice the following behavior when filters are applied:
■ When you select or enter an expression in a filter, only those rules that
contain the expression are displayed. If there are no rules that contain the
expression in the filter, then all of the rules in the table are hidden from
view.
■ If filters are used in other header columns, you can only filter the rules
based on the ones that are displayed as a result of the first filter.
■ Each subsequent filter that is applied adds further constraints to the
display.
■ Configured filters are not saved with the decision table.
Filters are available for Single-axis (Columns) tables, but not for Single-axis
(Rows) tables. For Double-axis decision tables, the filters are available only
for condition and action columns.
Showing Filters
You can filter rules in decision tables.
1 Click the Show Filters icon to enable the filtering fields.
2 Click the arrow in the column where you want the filter applied.
3 Perform one of the following operations and click OK:
■ Select an expression keyword and then enter the appropriate values.
For example, if Between is selected, enter the boundaries of the
values you want matched in the rules.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 61
■ Select an expression from the list.
If there are cells in a condition column that contain multiple values,
the values are presented in the filter dialog as one entry with each
value separated by a comma.
4 Repeat Steps 2 and 3 for all header columns where you want filters
applied.
Clearing Filters
You can clear filters in a column or clear all the filters at the same time.
u Perform one of the following actions:
■ Click the arrow in the column where you want to clear the filter and
click Remove Filters.
■ Select the column where you want to clear the filter and backspace
through the entry and press Enter.
■ Select the filter entry in the column where you want to clear the
filter, press Delete, and then press Enter.
■ Click the Clear Filters icon on the Decision Table editor toolbar.
Note This option clears filters for all columns in the decision
table at the same time.
Exporting and Importing Decision Table Data
You can export and import decision table data in the Decision Table editor.
When decision table data is exported, both a .csv file containing the values
and a .properties file containing configurable arguments, such as file
paths, folder names, and so forth are automatically generated. The files are
generated in a ZIP file.
You can export decision table data in one of these two formats:
Default
Format
This format creates new cells in the target file with values matching
those of the corresponding cells in the decision table.
Split Cells
Format
This format splits value cells into one or more CSV table cells to
accommodate a range of values; for example, 10,>= .. >=,5. Table
cells with just one or two values receive an empty cell or cells to
balance the column count in the CSV file. The split cells can be
modified easily; for example EMPTY, >, VALUE could be changed in
the .csv file to VALUE, > .. >, VALUE.
This is an example of exported data from a Single-axis (Columns table) in the
Split Cells Format:
Chapter 4: Authoring Rules in Decision Tables
62 Fair Isaac Corporation Confidential and Proprietary Information
After you export the decision table data, you can modify the data and then
import the modified data into the decision table.
Permission Requirements for Exporting Decision Table
Values
Before exporting decision table values to a CSV file, verify the permission
requirements.
Review the following permission requirements:
■ You have write permission to the disk and existing files.
■ The CSV file to replace is closed.
Exporting Decision Table Data to CSV Files
You can export decision table values to a CSV file. The decision table does not
need to be checked out to perform this operation.
1 Click the Export Decision Table icon on the Decision Table editor toolbar.
2 Select Default Format or Split Cells Format.
3 (Optional) Enter a description in the Comments field.
4 Click Finish.
5 In the dialog that appears, select one of the following options:
■ Open to open the ZIP file.
■ Save to save the file.
■ Cancel to stop the operation.
After to you export the decision table, you can update and re-import the
values into the decision table. However, you must know which format was
used to export the data.
Formatting Requirements for Importing Decision Table
Data
Before importing decision table data, verify that these formatting
requirements are met.
■ Any format change in a cell (for example, from < to <=) is an allowed
expression format in that cell.
■ The condition or action format matches in both the CSV file and decision
table. For example, a condition column or row formatted for real values
does not contain string values.
■ The number of condition and action (columns or rows) is the same in the
CSV file and in the decision table.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 63
■ The number of columns and rows in a Double-axis decision table is the
same.
■ No header columns or rows are missing or empty.
Note Any changes to the names of header columns or rows are ignored.
Importing Data Values from .csv Files into Decision
Tables
You can import data into a decision table using a .csv file. When you import
decision table values, you must know the format that was used to create the
decision table values.
1 Locate the decision table in the Explore pane or the Project Explorer.
2 Click the decision table to open it in the editor.
3 Perform one of the following operations to enable the decision table for
editing:
■ If the Check Out icon appears on the toolbar, click the icon.
■ If the check out icon is not on the toolbar, click the Edit icon.
4 Click the Import Decision Table icon on the Decision Table editor
toolbar.
5 Click Browse to locate the .csv file to import and click Open.
6 Under Import Format, select one of the following formats:
■ Default Format
■ Split Cells Format
7 (For a Single-axis decision table) Under Additional options, select one of
the following options:
■ Replace Existing Data to overwrite all current data in the decision
table with the imported data.
■ Append Data to add the imported data to the decision table.
Note This option is not applicable for a Double-axis decision
table.
8 Click Finish.
9 Click the Save icon or, if it exists, click the Check In icon.
Chapter 4: Authoring Rules in Decision Tables
64 Fair Isaac Corporation Confidential and Proprietary Information
Decision Table Keyboard Shortcuts
Keyboard shortcuts are available in the Decision Table editor.
Row
When a row is selected, these keyboard shortcuts allow you to perform the
following operations:
Table 6: Row Shortcuts
Shortcut Operation
Up directional key Selects the row above the current position.
Down directional key Selects the row below the current position.
Shift + Up directional key Extends the selection to the adjacent rows
above the currently selected row.
Shift + Down directional key Extends the selection to the adjacent rows
below the currently selected row.
Delete Deletes selected rows.
Ctrl + C Copies selected rows.
Ctrl + X Cuts selected rows.
Ctrl + V Pastes at selected row position.
Column
When a column is selected, these keyboard shortcuts allow you to perform the
following operations:
Table 7: Column Shortcuts
Shortcut Operation
Left directional key Selects the column to the left of the current
position.
Right directional key Selects the column to the right of the current
position.
Shift + Right directional key Extends the selection to the adjacent columns
to the right of the selected column.
Shift + Left directional key Extends the selection to the adjacent columns
to the left of the selected column.
Delete Deletes selected columns.
Ctrl + C Copies selected columns.
Ctrl + X Cuts selected columns.
Ctrl + V Pastes at selected column position.
Cell
When a cell is selected, these keyboard shortcuts allow you to perform the
following operations:
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 65
Table 8: Cell Shortcuts
Shortcut Operation
Shift + F10 Opens the context menu for that cell.
F2/[A-Za-z0-9]/ENTER Makes the value or values editable in that cell.
Ctrl + Down (directional key) Opens a menu of other possible expression
formats for that cell.
Home Moves the focus to the first cell in the row.
End Moves the focus to the last cell in the row.
Enter Moves the focus to the cell below.
Page Up Moves the focus to the header cell.
Page Down Moves the focus to the last cell in a column.
Ctrl + Space Selects the entire column.
Shift + Space Selects the entire row.
Shift + Arrow (directional keys) Selects contiguous rows or columns.
Tab Moves the focus to the next editable value in
the cell or to the next cell.
Chapter 4: Authoring Rules in Decision Tables
66 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 5
Authoring Rules in Decision Trees
A decision tree is a tree-like graph used to model decisions and the possible
outcomes of those decisions. A decision tree is a convenient way to visualize
the different paths in a complex decision process.
The Start node is on the left side of the tree. Each vertical band is known as a
"level" and corresponds to a decision variable in your object model. Each
condition node (displayed as a circle) on a single level represents the
segmentation of the same decision variable. The leaf node at the end of each
branch is the action (outcome) of each decision.
Figure 14: Decision Tree with Condition and Action Nodes
You use a wizard to select the decision variables to use for the condition
levels and the action level in the decision tree. A decision variable can
represent an object property in your imported object model, a business term,
or a parameter. The decision tree supports these data types for decision
variables:
■ boolean
■ date
■ enumeration
■ integer
■ real
■ string
You can use a text string and String type with a value list.
Fair Isaac Corporation Confidential and Proprietary Information 67
Note The money, duration, time and timestamp data types are not
supported so properties and business terms of these types are not
available in the wizard.
Decision Tree Interface
The decision tree interface consists of the Decision Tree editor toolbar and a
canvas to create and edit the decision tree.
Figure 15: Decision Tree with Levels, Splits, Branches, and Action Nodes
Table 9: Decision Tree Element Descriptions
Area Element Description
1 Decision Tree editor
toolbar
This toolbar contains commands that let you manage,
cut, copy, paste, or delete decision tree elements or
change the magnification of the decision tree.
2 Node path When a node is selected in the decision tree, the
element names for a given series of nodes are
displayed.
3 Start node To begin building a decision tree, select the start node
to see the available commands in the Edit drop-down
menu.
4 Level Each level represents a condition or action variable.
5 Split node A split node and its branches represent condition
values.
6 Branch The values in a split.
7 Subtree Splits with branches and nodes. A subtree is made up
of branches each with their own set of nodes. You can
assign an action node to the branch nodes on the last
level.
8 Action node Each action node represents a value assigned to the
action variable. When you assign an action for the first
time, an Action level is created. End nodes without an
action assignment are considered incomplete. For
example, the branch with < 21 is an incomplete node.
Incomplete nodes do not cause compilation errors.
Chapter 5: Authoring Rules in Decision Trees
68 Fair Isaac Corporation Confidential and Proprietary Information
Creating Decision Trees
Create a decision tree and select variables for the conditions and actions using
the wizard. In a decision tree, an object model property is known as a
variable.
The wizard displays only variables for those data types that are supported
with decision trees, such as string, integer, real, and enumerations. Variables
of type money, duration, time, and timestamp are not supported.
Note The system template version must be at least the minimum required
for the release in order for you to create an entity from the New dropdown.
If you are unable to create such an entity due to an error, you may
need to update your system templates or contact your RMA system
administrator.
1 In the Project Explorer, open the New drop-down menu and select
Decision Tree.
2 In the Create Decision Tree dialog, enter a unique name in the Name
field.
Decision tree names are automatically validated and any errors are
displayed on the wizard page. If a name includes spaces, the spaces are
replaced with underscores in the decision tree name. If you call the
decision tree from a function using SRL, include the underscores in the
name.
3 (Optional) Enter a Description that summarizes what the decision tree
evaluates.
4 (Optional) Select a Return type.
If a type other than void is selected, you do not need to specify the Action
variable. You can change the return type after creating the tree in the
decision tree editor.
5 (Optional) Add Parameters.
The parameter names you enter cannot contain spaces or special
characters such as "%$:/\". Validation checks for SRL naming and
uniqueness occur automatically and error messages if any, are displayed
on the wizard page. You can click a message to be taken to the field in
error. See Creating Parameters on page 70.
6 Click Next.
7 Select one or more variables to use as the conditions.
If your object model contains several classes that have properties with the
same name, to avoid confusion, move the properties of the first class to
the condition variables list before moving the properties of the second
class to the list.
When you move the property of the first class to the conditions variable
list, it is displayed with the property name. When you move the property
of the second class that has the same name, it is displayed with the
partially qualified property name. For example,class.propertyName.
This name will be displayed as the decision tree level label.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 69
Note In this release, parameters can only be searched for by their
name on this page. If the parameter is of a class type, none of its
properties can be searched for.
8 Click Next.
9 Select one variable to use as the action.
Note In this release, parameters can only be searched for by their
name on this page. If the parameter is of a class type, none of its
properties can be searched for.
10 Click Done.
Related Links
Valid Entity Names
Creating Parameters
You can create parameters in the Create Decision Tree wizard or in the
Decision Tree editor. A parameter can be used as a boolean, date, integer,
real, string, enumeration, or class type.
The decision tree will go into repair mode for one of the following reasons if
a parameter used as a condition or action variable is changed:
■ The data type is changed.
■ The parameter is deleted.
■ The parameter type is invalid. For example, a business term set is
removed or its name is changed.
1 Locate the decision tree in the Explore pane or the Project Explorer.
2 Click the decision tree to open it in the editor.
3 Click the Edit icon on the toolbar to enable editing.
4 Click the Add icon (green + sign) on the context toolbar of the
Parameters table.
A default parameter name is added as a link to the table. The parameter
name is appended with a number starting with 1.
5 Click the link.
6 In the Name field, enter a name that is unique within the decision tree.
7 In the Type drop-down list, select the parameter type.
8 Click Save.
9 Return to the decision tree by clicking the Parent View icon on the
toolbar.
Chapter 5: Authoring Rules in Decision Trees
70 Fair Isaac Corporation Confidential and Proprietary Information
Changing the Return Type
You can specify the return type of the decision tree in the Create Decision
Tree wizard or in the Decision Tree editor. The return type can be void,
boolean, date, integer, real, string, enumeration, or class type.
If void is selected as the return type, you can specify an Action variable. If
any other data type is selected, you will not be able to specify an Action
variable. You can change the return type to specify an Action variable using
the Manage Decision Tree Variables dialog in the Decision Tree editor.
It is a best practice to change the return type before creating the Action level
in the decision tree. If the return type is changed after the Action level has
been created, the decision tree will go into Repair Mode. To fix the decision
tree, do one of the following:
■ Change the return type back to the original type.
■ Remove the Action level.
■ If the return type was changed to void, select an Action variable in the
Manage Decision Tree Variables dialog.
Inserting Splits
Add a split to a decision tree when you want to create a set of branches for
condition nodes. You can add a split to the Start node or to any condition
node in a decision tree by selecting Insert Split in the Edit drop-down menu.
Each split consists of two or more branches.
Figure 16: Decision Tree with Splits, Branches, and Subtrees
Item Label
1 Split
2 Branch
3 Subtree
Select the Start node or a condition node to insert a split. You can add a split
node that creates condition nodes on an existing level or create a new level
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 71
while creating the split. A split with branches is also known as a subtree,
which can be edited, cut, copied or pasted.
When you insert a split, enter a Branch threshold value or a string value and
click Insert for each branch you want to create. Click Apply to add the
branches to the decision tree.
■ If you have entered numeric values, the ranges for each condition node
corresponding to a branch are automatically generated as soon as you
click Apply. Additional thresholds are also added to ensure that there are
no gaps or overlaps for numeric types.
■ If string values are entered, each value is displayed as a branch, along
with the Any other value node. The Any other value branch is used to
manage incoming string values that do not match any of the string
values. The branches and the Any other value branch are added as soon
as you click Apply.
■ If you selected a condition variable of type enumeration, each
enumeration value is displayed as a branch as soon as you click Apply.
Inserting Levels
All condition nodes on a single level represent a segment of the same
decision variable. When you create a decision tree, it does not contain any
levels. Add a level using the Insert Level command in the Edit drop-down
menu. You can also insert a level at the same time you insert a split using the
Insert Split command.
The Insert Level command is available only when you first begin building a
tree. After you begin adding splits, the Insert Level command is no longer
available. However, you can add additional levels by selecting a condition
node and then clicking the Insert Split command. An action level is created
when you assign an action for the first time in a tree.
If you need to change the data type of a condition variable that is used as a
level in the tree, it is a best practice to change the data type before creating
its nodes. However, if you find you need to change the data type of a
condition variable after you have added the nodes, the tree may go in to
Repair Mode and you may need to remove the nodes in the level before
removing the level and replacing it with the new level.
You can view a level's properties, such as the variable and its type, by
selecting the level (outlined in blue) then selecting Properties in the Edit
drop-down menu.
Note The display names of the levels are not editable.
Removing Levels
To remove a level, remove all of the nodes in the level first. After the nodes
have been removed, select the level and then click Edit > Remove empty
level or select the command from the shortcut menu.
Chapter 5: Authoring Rules in Decision Trees
72 Fair Isaac Corporation Confidential and Proprietary Information
Replacing Levels
You can replace the condition variable used for a level as long as the variable
is replaced with one of the same type. For example, if a string variable is used
for the level, you can only replace it with another string variable.
Note String value list and enumeration data types can be replaced for
each other.
1 Select the level you want to replace.
2 Click Edit > Replace Level or select the command from the shortcut
menu.
3 Select a variable of the same data type from the drop-down menu or click
the icon to open the Select Decision Key Variable dialog. Select a
variable and click Apply.
4 Edit the values.
5 Save the changes.
Copying and Pasting Subtrees
A split with two or more branches is known as a subtree. You can copy a
subtree from a given condition node and paste it to another condition node.
You usually copy and paste subtrees when you want to repeat the same series
of conditions on another branch using the same levels.
To copy a subtree, select a branch with a condition node that has the subtree
you want to copy and use the Copy subtree command in the Edit drop-down
menu.
To cut a subtree from one branch node to another branch node, select the Cut
subtree command. Then select the condition node where you want to paste
the subtree and select the Paste subtree command. The Paste subtree
command is enabled only if you have copied or cut a subtree from a branch
node.
When you cut and paste subtrees, duplicate levels may be created. Duplicate
levels are permitted in decision trees.
Reordering Branches
Reorder the branches to rearrange their display order in the tree. Use the Edit
Split dialog to reorder the branches in a condition node. To open the Edit
Split dialog, select the condition node and then select Edit Split from the Edit
drop-down menu or from the shortcut menu.
The dialog displays the order of the branches as they are displayed in the
decision tree. Note that the 0 branch is the top branch of the split. You can
only reorder branches in levels of boolean, enumeration, or string type.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 73
Figure 17: Changing the Display for the Branches
To reorder the branches, select the row with the branch number that you
want to move. Drag and drop it on top of the branch number where you want
it to appear. The order of the branches automatically readjusts. The tooltip
changes to a green checkmark when the reordering operation is valid.
Creating Conditions Using Or by Merging Branches
Merge the branches to combine condition expressions that are connected with
"or". For example, to author an expression such as thePatient.serviceType is
"Emergency" or thePatient.serviceType is "Office_Visit", merge the branches.
You can only merge branches in levels of enumeration or string type.
Use the Edit Split dialog to merge the branches in a condition node. To open
the Edit Split dialog, select the condition node then select Edit Split from
the Edit drop-down menu or from the shortcut menu. From the Branch
column, drag and drop the branch row you want to merge on top of the
branch row you want to merge. The tooltip changes to a green checkmark
when the merge operation is valid, as shown in this figure. Note that the Any
other value expression in a string level can never be merged.
Figure 18: Valid Merge Operation
To undo the operation, click the unmerge icon in the row to separate the
expressions.
Chapter 5: Authoring Rules in Decision Trees
74 Fair Isaac Corporation Confidential and Proprietary Information
Figure 19: Icon Used to Unmerge the Branches
Using Any Other Value as a Condition Expression
The Any other value expression is automatically added when you create a
split with a condition variable of type string. It is used to manage situations
where incoming data does not match the criteria used on the other branches
of a split.
If you decide not to assign an action to an Any other value condition node, it
is treated as an incomplete node and will not be evaluated. However, the
incomplete node will not cause a compilation error.
Assigning Actions
Each decision tree has one action variable. You can assign an action to the
last condition node for a given series of branch nodes. The action node can
assign a value or assign a value based on an action expression or a list of
action expression.
1 Select the condition node you want to assign an action to.
2 Select an action by doing one of the following:
■ Click the Edit drop-down menu.
■ Right-click on the condition node.
3 Select one of the following options:
■ Assign value: Assign a specific value for the action. Depending on the
data type of the action variable, you can select or enter a value.
Note This is how values were assigned to action nodes in
previous releases.
■ Assign expression: Create an action expression or list of action
expressions. A return value is not necessary, but if one is specified, its
type should compatible with the Action variable type.
4 Assign a value or create an expression or expressions for the action.
For a value, the value must match the data type of the Action variable.
For an expression, the evaluated value must match the data type of the
Action variable.
5 Click Apply.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 75
Assigning an Expression
The Assign Expression dialog provides the ability to author action expressions
using a drag and drop interface. Action expressions or statements assign a
value to a property as a consequence of a series of branch nodes (conditions)
evaluating to true or false. Action expressions or statements are fired from
top to bottom. If there is more than one action statement that assigns a
value to a property, the value assignment overwrites any assignment that
was previously made.
Note There is no undo command to revert the delete operation.
However, you can click Cancel to discard unsaved changes.
This dialog has four main components:
Item Description
1 The Expression label is the text that will display on the Action node in the decision
tree. This is a required field.
2 The Item Selector displays the entities associated with your object model, which can
be parameters or variables. It includes a search field and a toolbar with options to add
operators, dates, empty fields, or dynamic objects that you can use to create more
complex action expressions. These are the operations that you can perform with the
toolbar commands:
■ Drag and drop an operator and an empty field to add it to an action expression.
■ Drag and drop a date to replace an existing date field or one that may have been
accidentally deleted.
■ Drag and drop an empty field to replace an existing field or one that may have been
accidentally deleted.
■ Drag and drop a dynamic object to replace an existing field or one that may have
been accidentally deleted. When the dynamic object is dragged, the fields where the
object can be used are highlighted.
■ Drag and drop a built-in function.
■ Drag and drop another functional.
Chapter 5: Authoring Rules in Decision Trees
76 Fair Isaac Corporation Confidential and Proprietary Information
Item Description
3 The toolbar displays commands that you can use to author decision logic. These are
the operations that you can perform with the toolbar commands:
■ Add parentheses when you need to specify the order of operations for mathematical
expressions. Click the outline of the first expression and then press Ctrl before
clicking on the outline of the second expression.
■ Remove parentheses. Click on the selector (see Item 4) for the sub-expressions and
then click the command.
■ Delete the expression or its elements.
■ Copy and paste an expression.
4 A selector is a vertical border on the right side of a date, field, group, or operator. When
you click the selector of an item, the item is highlighted.
Changing an Action
You can change an action to a literal value or an expression when an action
has already been applied to a condition node. When you change an action, the
decision tree will not go in to Repair Mode.
1 Select the condition node where you want to change the action.
2 Open the menu by doing one of the following:
■ Click the Edit drop-down menu on the toolbar.
■ Right-click on the condition node.
3 Select one of the following options to change the action:
■ Change to expression: Change a value to an action expression. If
this option is selected, the current value will be deleted.
■ Change to value: Change an action expression to a value. If this
option is selected, the calculation in the expression will be deleted.
4 Assign a value or create an expression for the action.
For a value, the value must match the data type of the Action variable.
For an expression, the evaluated value must match the data type of the
action variable.
5 Click Apply.
Managing Decision Tree Variables
The Manage Decision Tree Variables dialog allows you to view and search
for the available variables from your object model and parameters and to add
or remove condition and action variables for a decision tree.
You can search for variables using the text box. However, only variables that
can be used as a condition or action variable will appear in the search results.
Classes cannot be used as condition or action variables. Only their properties
can be selected as condition or action variables.
To remove a condition variable or replace an action variable that is already
being used in a decision tree, you must first delete the level where it is used.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 77
Otherwise, the variable name is disabled in the dialog and it cannot be
removed or replaced.
Note To remove a level, you must delete all of the nodes in the level
first.
If void is selected as the return type, you can specify an Action variable. If
any other data type is selected, you will not be able to specify an Action
variable. To specify an action variable, change the return type to a type other
than void and remove the Action level from the tree.
Repairing a Decision Tree
The decision tree may open in Repair Mode if certain changes are made to
variables in the decision tree.
The decision tree opens in Repair Mode, if any levels and/or nodes are
outlined in red. A decision tree enters Repair Mode if any changes have been
made to the following entities used in the decision tree:
■ Names or data types of object model properties.
■ Return type is not compatible with the action variable data type.
■ Names of enumeration values.
■ Names of business term sets where its business terms have been used as
condition or action variables.
■ Names or data types of business terms that have been used as condition
or action variables.
■ The name of a value that comes from a value list associated with a
business term used as a condition or action variable.
■ Parameters or return types.
If your action is displayed in repair mode as a result of a change to a
return type, you need to open the Manage Decision Tree Variables dialog
and select a new action variable. When you exit the dialog, the action
variable is immediately applied to action level and you need to edit the
nodes.
While the decision tree still displays in the editor, the Copy, Cut and Paste
and the Insert Split and Insert Level commands are not available however,
the Manage Decision Tree Variables icon is available. Any levels or nodes that
are in error are outlined in red.
The commands that are specifically used for repairing the decision tree are
displayed in the Edit drop-down menu. Depending on the type change that
triggered the level to display in error, follow the instructions in the messages
that appear when you hover over the level displaying in Repair Mode. For
example, if the variable type is changed from string to integer, you may need
to clear the subtree and remove the empty level before inserting a new split.
Tip Hover over the level in Repair Mode and follow the instructions to fix
the problem.
Chapter 5: Authoring Rules in Decision Trees
78 Fair Isaac Corporation Confidential and Proprietary Information
To replace the levels , use variables of the same data type as the ones you
want to replace. To repair nodes , use values with the same data types as the
previous values.
Note Values of type string with a value list and enumeration data types
can be replaced for each other.
Decision Tree Limitations
These limitations exist for the decision tree in this release.
■ The money, duration, time, and timestamp data types are not supported
for condition and action variables.
■ The words, "action", "start", and "Any other value" are considered
reserved words in the Decision Tree editor. If your object model includes
properties with the names "action", "start" or "Any other value", and you
want to use these properties as decision variables in your decision tree,
consider changing those properties names in the object model before
creating a decision tree. Note that if you update the object model, this
may impact the decision entities that you have already created.
■ In a generated report, a picture of the decision tree is not available.
■ The decision tree is not supported for use with comparison queries.
■ Group separators are not available for integer and real values used in
condition or action nodes.
Related Links
FSML Decision Tree Import Limitations
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 79
Chapter 5: Authoring Rules in Decision Trees
80 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 6
Authoring Rules in Scorecards
You can create or edit a scorecard when a Blaze Advisor project contains a
Score Model Template or when a PMML scorecard model is imported into a
rule maintenance application.
A scorecard is a graphical representation of a mathematical formula used to
predict outcomes, typically for business customers or prospects, based on
facts known about them in the present. A target field is defined when creating
a scorecard, which is the outcome to be predicted. Scorecards can predict two
types of outcomes:
■ The likelihood that an event will happen or will not happen (binary
outcome).
■ The amount of an event (continuous outcome).
A scorecard generates a score that is the calculation of the predicted
outcomes. Scoring the likelihood that an event will happen results in a number
that is proportional to the likelihood that the event will or will not occur.
Scoring the estimate of a future amount results in that predicted value. The
following examples describe these different types of scores:
■ Your credit score is proportional to the likelihood that you will be able to
pay your financial obligations on time. The higher your score, the greater
the likelihood that you will pay.
■ You can generate a score that represents the predicted revenue in the
next 6 months.
The scorecard uses known facts about the customer or prospect as its
calculation criteria. The known facts are referred to as scorecard variables ,
which are the equivalent of characteristics in a Blaze Advisor score model. A
variable can be a numeric value, a string value, or an item from a pre-defined
list of alternatives.
Each variable contains one or more bins . At runtime, each bin in a variable
evaluates the data value passed to the variable and when a value matches a
bin, a partial score is assigned to that variable. The value used for the partial
score is contained in the Partial score cell in each bin.
A scorecard is additive, which means it calculates the sum of all partial scores
assigned to variables to produce an overall score. This overall score has
predictive power and represents an assessment, opinion, or prediction about
the customer or prospect.
Fair Isaac Corporation Confidential and Proprietary Information 81
Creating Scorecards
Create a scorecard to author a set of rules that will be evaluated based on
the data passed into the project.
1 In the Project Explorer, open the New drop-down menu.
2 Select Custom Entity.
3 Expand the project folder containing the Score Model Template.
4 Select the template.
5 Enter a unique name in the Name field.
6 Press Create.
Defining Scorecards
The Scorecard editor contains the following fields:
Scorecard
name
If this field is visible, you can rename the scorecard. Since this is
the name of the entity in the SRL, the name cannot include spaces
or special characters. If an invalid character or space is entered,
the name reverts to the previous name.
Description (Optional) A summary of what the variable evaluates.
Variables A variable is a known fact about the customer. It can be a numeric
value, a string value, an item from a pre-defined list of
alternatives, or any Java, XML or COBOL class.
Bins The possible values and the rule conditions for a variable.
Writing Rules in Scorecards
Enter values for the variables and their bins to create rule conditions. Each
bin within a variable is a rule condition. When the input matches one of the
bins, the partial score of the matching bin is assigned to the variable. At the
end of scorecard processing, the partial scores of each variable are summed
to return an overall score. The resulting score can be used by other decision
entities.
Chapter 6: Authoring Rules in Scorecards
82 Fair Isaac Corporation Confidential and Proprietary Information
Variables
Every scorecard must have at least one variable. A variable is a known fact
about the customer. It can be a numeric value, a string value, an item from a
pre-defined list of alternatives, or any Java, XML or COBOL class.
Variables are defined by its Baseline Score, Type, and Bins. A Description
can also be added to summarize what the variable evaluates.
The baseline score is used to determine the reason code for the variable. Each
variable is divided into bins, which represent the possible values and rule
conditions of the variable. The format of the Bins can vary from bin to bin
within the same variable.
Selecting Variables
The variables available to use in the scorecard are supplied by the Blaze
Advisor Score Model Template. The template is editable only in the Blaze
Advisor IDE.
Any static fixed variables (characteristics) in the template are always visible in
the scorecard and cannot be deleted or renamed. Any dynamic or static
optional variables can be added or deleted from the scorecard as needed. To
add a variable to the scorecard, make the scorecard editable, click Select
Variables to open the dialog and select a variable. The Display Name field is
applicable only to dynamic variables and not to static optional variables.
When the check box next to a variable in the scorecard is cleared, the variable
will be removed from the scorecard after you click Apply. After the variable is
deleted from the scorecard, all of its settings and bins are deleted and do not
appear if the variable is added to the scorecard again.
Baseline Score
The Baseline Score of a variable is a numeric value that is used to determine
the reason code that is returned. This option applies only if there is a reason
code list referenced in the Blaze Advisor Score Model Template.
The baseline score can be the maximum, the minimum, the mean, or an
arbitrary value that defines a typical point of comparison of the partial scores
in the variable. Each variable can have a different baseline score. If you are
not using a calculation to return reason codes, you do not necessarily need to
enter a value in this field.
If a partial score for a variable is generated that is far from the baseline
score, then calculating the reason code will indicate why the total score is
higher or lower than expected. For example, if the baseline score of a variable
was 50 and the partial score determined was 35, then the reason code would
return why 15 points were lost from the total score.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 83
Bins
A variable is divided into bins. Bins define the possible values and the rule
conditions for a variable.
For example, an Age variable might contain bins for Young Adult, Adult, and
Senior age ranges. Bins are configured so that a variable value can fall into
only one bin. An All Other bin provided, by default, for each variable ensures
that all possible values are covered.
You can add one or more bins to a variable. The values entered in the bin
cells are used to generate the rules. The numerical values are automatically
sorted from the greatest to the least (top to bottom).
Table 10: Field Descriptions for Bins
Field Description
Values Enter a value that will be used to evaluate the incoming data. This can
be a range of values, string values, or enumeration values.
Label (Optional) Enter a text string to describe the evaluation being performed. This text
is for internal use only.
Partial Score Enter a real number for the partial score.
The number of decimal places that are displayed in a Scorecard editor
depends on the design of the scorecard. The default behavior is to
display numeric values up to six decimal places. If you are entering a
numeric value of type real, it must be a 64-bit floating-point number.
Unexpected Select the check box in the Unexpected cell when you need to track
the occurrence of unexpected values. By default, the All Other bin is
generated and the Unexpected check box is selected.
Reason Code (Optional) The Reason Code columns appear only if a reason code list
is referenced in the Blaze Advisor Score Model Template. Select a
reason code from the drop-down menu.
Adding Bins
There are various ways to add bins to a scorecard. You can add multiple bins
at a time, bins with ranges, categorical bins, and multi-value bins. After a bin
has been added, you can edit the value and operator in the cell.
Multiple Bins
You can add multiple bins at one time by entering the bin values separated
by semicolons (;). These values can be numeric or string values. For example,
entering "100; 200; 300" creates the following bins:
Chapter 6: Authoring Rules in Scorecards
84 Fair Isaac Corporation Confidential and Proprietary Information
Range Bins
You can add bins with range values by entering the bin values separated by a
space. These can be numeric values only. For example, entering "5 10 15"
creates the following bins:
Note Since a space indicates a range value, spaces between numbers is
not supported. If your locale uses a space for the thousand separator, do
not include the space. For example, enter "10000" instead of "10 000".
After the bin(s) are added, you can change the operator to one of the
following:
■ <=
■ <
■ >=
■ >
Categorical Value Bins
Categorical bins are string values. You can add bins with a single value or with
multiple values. Select a bin value in the Available Values drop-down menu
to add a single value bin. To add a single bin with multiple variables, select all
of the desired values in the drop-down menu.
When a value is added to the bin, the value is removed from the drop-down
menu. When a value is deleted from a bin, the value is restored to the dropdown
menu.
Multi-Value Bins
Add a multi-value bin by entering the bin values separated by a vertical bar
(|). These can be numeric or string values. For example, entering "10 15 | 20
25" creates the following bin:
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 85
Tracking Unexpected Range Values
Use the Unexpected check box in a scorecard to test the validity of a
resulting score.
If you mark one or more bins in a variable as Unexpected and at runtime a
value matches a bin marked as Unexpected, a counter is incremented. The
existence of unexpected values may indicate that the resulting score is
invalid.
By default the All Other bin in each variable has the Unexpected check box
selected. If a value that is passed to a variable cannot be evaluated by any of
the bins, then the partial score in the All Other bin is assigned and the
occurrence of an unexpected value is tracked.
Validating Scorecard Values
The scorecard values are automatically validated when a variable or bin is
added or edited.
The scorecard detects the following types of errors:
■ Data type errors
For example, a string value is entered as a Bin value that allows only real
values.
■ Overlapping value errors.
For example, the value >= 3.8 of a bin overlaps with the values 3.6
<= .. <4 of a second bin.
■ Duplicate expression errors
For example, two bins use the same expression format and the same
range value, such as >= 4.
■ Upper bound value is less than the lower bound value
For example, a range has the lower and upper bound values of 3.6
<= .. <2.
If an invalid value is detected, you see the following error indicators:
■ The variable name is marked in red and a tooltip displays the reason for
the error.
■ The bin values causing the error are highlighted in red.
■ When entering a bin value, the text box is highlighted in red and a tooltip
appears with the reason for the error.
Chapter 6: Authoring Rules in Scorecards
86 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 7
Importing PMML Models
Import a Predictive Model Markup Language (PMML) model to use its contents
to augment your decision logic.
Developed under the auspices of the Data Mining Group, PMML is an open
standard XML-based markup language that provides a way for applications to
define statistical and data mining models and to share models between PMMLcompliant
applications. It allows users to develop models within one vendor's
application, and use other vendors' applications to execute, visualize, analyze,
or evaluate the models.
Note The imported PMML files must comply with the PMML 4.2.1
Specification.
You can import PMML scorecard models that were produced with FICO® Model
Builder or with any modeling application, providing the application uses the
same subset of PMML elements as Model Builder.
Related Links
Valid Entity Names
Creating Scorecards from PMML Files
Create a scorecard model by importing a scorecard PMML file with the Import
PMML File wizard.
Scorecard models are widely used in the financial industry for their
interpretability and ease of implementation, and because the model variables
can be mapped to a series of reason codes which provide explanations of each
score. Optionally, scorecard PMML files can contain reason codes. When
reason codes are detected during the PMML import, a reason code list is
automatically generated and you can assign reason codes in the Scorecard
editor.
1 In the Project Explorer, open the New drop-down menu and select
Scorecard from PMML.
2 In the Select File page, complete the following substeps:
a Click Browse to open the Choose File to Upload window.
The file name is used for the scorecard name.
Fair Isaac Corporation Confidential and Proprietary Information 87
b Select a valid file and click Open.
Note Valid file extensions for selection are .zip, .xml, and .pmml
files. A valid .zip file contains one or more valid scorecard .xml
or .pmml files.
c Click Next.
3 In the Select Entities page, complete the following substeps:
a All the entities are selected by default. If the classes are available in
the Blaze Advisor project, you can clear the ModelIn class check
box.
b Optionally, you can select the following options:
■ Overwrite entities in the current project.
Tip Clear this option if you import a .zip file that contains
PMML models with the same name and you do not want a
another copy of the entities.
■ Add entities to subfolder.
Note The subfolder name is the same as the model name
and the model is created in the subfolder. If you select this
option, the Overwrite entities in the current project check
box is selected automatically.
■ Use model name as prefix when generating entity names. This
creates unique names for each imported entity.
c Click Next.
4 The Import Summary page displays a read-only report of the selections
made in the previous wizard pages. Click Done to import the PMML file.
Related Links
Authoring Rules in Scorecards
Validating Scorecard Values
Blaze Advisor Entities Based on Import of PMML
Models
When you import a PMML model, various entities are generated in the Blaze
Advisor IDE, depending on the model definition.
The following entities are generated in the underlying Blaze Advisor project
through the successful import of a PMML scorecard model:
■ Score Model Template with a return type of void and two input
parameters:
- input of type ModelIn
- returnInfo of type NdScoreModelReturnInfo
Chapter 7: Importing PMML Models
88 Fair Isaac Corporation Confidential and Proprietary Information
Note Though the return type is void, the returnInfo parameter
supports the return information from the scorecard.
■ Model Instance file, which opens as the Scorecard editor.
■ ModelIn class.
■ Optionally, a reason code list, if it is defined in the imported PMML file.
■ Optionally, a fixed array object, representing bin values, if it is defined in
the imported PMML file.
If you selected the Overwrite entities in the current project option in the
Import PMML File wizard, the original entities selected for overwriting are
deleted from the underlying Blaze Advisor project when the import is finished.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 89
Chapter 7: Importing PMML Models
90 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 8
Importing FSML Files
Import a FICO Strategy Markup Language (FSML) .xml file into the Blaze
Advisor Rule Maintenance Application (RMA) to create a decision tree.
FSML 1.0, 2.0, and 2.5 are supported in this release. The FSML file exported
from the following FICO products are supported:
■ FICO® Model Builder for Decision Trees
■ FICO® Xeno (now known as Decision Tree Pro)
■ FICO® Blaze Advisor Decision Graph (the decision graph is deprecated in
Blaze Advisor 7.4)
Importing Decision Trees from FSML
This section describes each page of the Decision Tree from FSML wizard that
is used to create a decision tree from an FSML strategy file.
When a decision tree is created from an FSML file, a business term set is
created for the Input and another one for the Output of the tree. The term
sets must have a unique name in a project, and each business term must have
a unique name within the term set. The term sets and their business terms
can be used as variables in other decision entities in a project.
Note If a variable in the FSML file is defined as an integer data type in
the Data Dictionary and the variable is compared against a real data type
value in a condition of the decision tree, the variable will be defined as a
real data type in the business term set.
When importing an FSML file, the label of a condition node in the decision tree
will be replaced with the actual condition that is being tested. For example, if
a condition tests that age is between 18 and 35, the new label "18 <=..<35"
will be created.
The decision tree will be imported in Repair Mode if the FSML file contains a
value list with empty values. You can add the missing value to the FSML file,
or, after the FSML has been imported, you can add the missing values to the
value list by either clicking Repair Level or by editing each split in Repair
Mode.
Fair Isaac Corporation Confidential and Proprietary Information 91
Related Links
Valid Entity Names
Opening the Wizard and Selecting an FSML File
Selecting and Renaming Business Terms
Naming the Decision Tree
Viewing the Import Summary
FSML Decision Tree Import Limitations
Opening the Wizard and Selecting an FSML File
Open the wizard and import an FSML-format .xml file to create a decision
tree. The .xml file must contain a valid FSML strategy in order to be
uploaded.
1 In the Project Explorer, select the folder where you want to create the
decision tree.
2 Click the New drop-down menu.
3 Select Decision Tree from FSML.
4 Click Browse and select a valid .xml file to import.
5 Click Next.
Related Links
Importing Decision Trees from FSML
Selecting and Renaming Business Terms
Specify the attributes of the business terms that will be created for the
decision tree. You can rename the Input and Output term sets and the
business terms. The business term names, types, values, and descriptions
come from the FSML file dataset. The Input and Output term sets can be
accessed from the Project Explorer in the same folder that the decision tree is
created in after it has been imported.
If you want to rename the term sets or business terms, be aware of the
following naming restrictions:
Property Restriction
Term Set A valid name consists of one
or more letters (A-Z, a-z),
digits (0-9), and some special
characters, such as _. It
cannot contain the following
special characters: $"/\;|'
Business Term A valid name consists of one
or more letters (A-Z, a-z),
digits (0-9), and underscores
Chapter 8: Importing FSML Files
92 Fair Isaac Corporation Confidential and Proprietary Information
Property Restriction
(_). It cannot contain spaces,
punctuation marks, or special
characters, such as $ or %.
By default, it is assumed that you want to use all of the business terms as
properties in the input argument of the decision tree. Therefore, all of the
business terms are selected as Input and will be added to the Input term set.
If you do not select any variables, the output defined in the FSML strategy file
is added to the Output term set and named Action. By default, it is assumed
that only the Action variable is required for the return argument, so no
properties are selected in the Output column. If you select business terms to
use as output, they will be added to the Output term set.
Related Links
Importing Decision Trees from FSML
Naming the Decision Tree
The name of the Strategy is the default decision tree name. Enter a new name
for the new decision tree and, optionally, enter a description of the decision
the decision tree generates. A valid name consists of one or more letters,
digits (0-9), and underscores (_).
Related Links
Importing Decision Trees from FSML
Viewing the Import Summary
The content of the report depends on the choices you made in the previous
pages of the wizard.
■ To complete the export operation, click Done.
■ If you need to modify the export, click Previous to return to the previous
page.
■ If you do not want to complete the operation, click Cancel.
Related Links
Importing Decision Trees from FSML
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 93
FSML Decision Tree Import Limitations
There are some limitations to the FSML decision tree import in this release.
■ An FSML file can only contain zero or one strategy. If the file does not
have a strategy, the business terms and an empty tree will be imported.
If the file contains more than one strategy, an error is displayed.
■ Multiple minimum/maximum ranges for variables defined in the Data
Dictionary or Decision Area definitions of the FSML file are not supported.
For example, variables can have a maximum and minimum value
associated with them. Only a single pair of maximum/minimum range is
supported.
■ FSML files that contain alphanumeric variable definitions are not
supported. As a workaround, you can change these variables to string
types with category values.
■ The FSML decision tree does not support the following items associated
with variables and actions:
- ID
- MaxLength
- Description
- Increment (on a numeric value)
- Color
Note The imported decision tree is subject to the same limitations as a
decision tree that is created from the New drop-down menu.
Related Links
Importing Decision Trees from FSML
Decision Tree Limitations
Chapter 8: Importing FSML Files
94 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 9
Authoring Decision Logic Using SRL
In some of the editors, there is an interface that you can use to author
decision logic using FICO's Structured Rule Language (SRL), which is an easyto-
understand, English-like language. The interface is referred to as the
Advanced Builder editor.
Note If you need to write statements using SRL syntax and do not see
the Switch to advanced builder link in your rule conditions, rule actions,
functions or business term calculations pages, you need to contact your
RMA system administrator to add this feature.
The Advanced Builder editor is available by default in the Function editor and
when you click the Switch to advanced builder link from one of these
editors:
■ Ruleset (rule conditions, rule actions, and variable initialization)
■ Business Term (calculations)
The SRL Code editor features include:
■ Line numbers.
■ Code completion triggered based on user activity.
■ Auto-completion to ensure matching parenthesis.
■ Syntax errors are indicated by an error icon next to the line number. If
you hover over the error icon, a tool tip appears with an error description.
■ Syntax coloring that helps you to distinguish between the different SRL
syntax elements by highlighting them in different default colors.
■ Hot-keys for undo (Ctrl-Z) and redo (Ctrl-Y).
In SRL, when inserting calls to the built-in functions or class properties, use
the fully qualified name of the function or class. For example, to use the builtin
max(integer, integer) in the Math built-in functions, enter
math.max(integer, integer).
Note Nested statements should be used sparingly. Unlimited nested ifstatements
are supported but deeply nested statements are more difficult
to read, maintain, and extend and are not considered a best practice.
Fair Isaac Corporation Confidential and Proprietary Information 95
Related Links
Creating Local Variables
Creating Patterns
Dynamic Objects
Creating an Initialization Rule
Defining Rules
Creating Rule Conditions
Creating Rule Actions
Triggering Code Completion
When entering SRL syntax in an editor, guidance is provided in the form of
code completion lists. Based on the placement of your cursor in the code, the
completion list contains the appropriate global and local parameters, classes,
object, variables, and other entities. For example, if a class-based entity is
selected, typing a dot after the entity triggers a completion list of properties
for that entity. The completion lists may also be populated with keywords and
suggested syntax.
Trigger code completion by entering one of the following characters:
■ A dot "." after a valid identifier. For example, input.Applicant.
■ Press Ctrl + Space.
■ An open parenthesis such as "(" or "[" and quotation marks such as " are
auto-completed with the matching closing parenthesis or quotation mark.
■ Entering a ' does not automatically add a matching single quotation mark
but allows you to use an apostrophe to write human language syntax
such as Applicant's followed by a space to trigger code completion.
Code completion occurs after a slight delay and only if you have not typed
anything after these characters. You can add an item from the completion list
to the editor by selecting it. If there is only one item displayed in a
completion list, press Ctrl + Space or Enter to add it to your statement.
Tip To activate code completion in the editors, press Ctrl + Space.
Code Completion for Common Use Cases
The behavior you see when you trigger code completion depends on the SRL
syntax you have already entered.
Chapter 9: Authoring Decision Logic Using SRL
96 Fair Isaac Corporation Confidential and Proprietary Information
Table 11: Common Code Completion Behavior
Use Case Behavior
User presses Ctrl + Space. The completion list displays with all available
global and local parameters, classes, object,
variables and other entities.
Completion list contains only one possible
choice.
You must explicitly select the choice by
pressing Ctrl + Space.
User enters a character while the completion
list is open.
The completion list updates to display only
those items that begin with that character.
User presses Backspace to remove one or
more characters while the completion list is
open.
The completion list updates to display those
items that match the current text. The list may
include different items, new and existing items,
or the same items as the previous list.
User enters a character while the completion
list is open and no items match it.
Code completion is canceled.
User presses Backspace until the insertion
point is positioned before the start of the
completion list.
Code completion is canceled.
More than 10 items are displayed in the
completion list.
A vertical scrollbar appears.
The width of the list is greater than 500 pixels. A horizontal scroll bar appears.
Code Completion Lists
What you see in the code completion list depends on the current insertion
point within the SRL and the syntax you are authoring.
Table 12: Code Completion Lists
Insertion Point Location Completion List Content
Beginning of a statement. ■ All global variables.
■ All built-in and user defined functionals.
■ All common SRL control constructs such as,
if...then, when...do, for each...do, while...do,
until...do, apply, create, delete, etc.
Immediately after a dot preceded by a class or
enumeration name.
■ All static properties of that class, or list of
enumeration items for an enumeration.
■ All static methods of that class.
Immediately after a dot preceded by an
expression evaluating to an object.
■ All non-static properties of that object's class.
■ All non-static methods of that object's class.
An object immediately followed by an
apostrophe and the letter "s" and a space. For
example, if you enter Applicant's, you will
see a completion list.
■ All non-static properties of that object's class.
■ All non-static methods of that object's class.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 97
Table 12: Code Completion Lists (continued)
Insertion Point Location Completion List Content
After an expression appearing in the middle of
a statement
■ Comparison operators that are allowed for
that expression type.
■ Boolean operators if the expression type is
boolean or numeric.
After a binary boolean operator. ■ The constants True or False.
■ All global variables.
■ All built-in and user defined functionals.
After an arithmetic operator. ■ All global variables.
■ All built-in and user defined functionals.
At the end of a valid SRL identifier without any
space between the last character and the
cursor.
The same list of all identifiers that would be
shown at the beginning of that SRL identifier,
except that the list is now filtered to show only
those items that begin with the current
identifier.
Chapter 9: Authoring Decision Logic Using SRL
98 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 10
Controlling the Execution Flow
A decision flow is a graphical presentation of all or a portion of the flow of
control in a decision service. A decision flow defines the sequence in which
the entities are executed.
You can do one of the following with a decision flow:
■ Use it to start the execution of the decision service.
■ Choose to have a decision flow execute whenever an object of a specified
type is posted as an event or when the decision service is run.
■ Invoke a decision flow as a functional.
A decision flow consists of the following:
■ A start node that marks the beginning of the decision flow.
■ An end node that marks the ending of the decision flow.
■ One or more decision flow elements such as tasks and splits that you can
insert between the start and end nodes.
The execution of a decision flow proceeds along the assembled flow.
Note If you are using instances of the Flow Templates in your FICO
Decision Component, the appearance of the ruleflow and the ruleflow
entities is the same as the decision flow .
Fair Isaac Corporation Confidential and Proprietary Information 99
Decision Flow Editor Interface
The Decision Flow editor consists of several toolbars and panes.
Figure 20: Decision Flow Editor Interface
Table 13: Description of Decision Flow Editor Toolbars and Panes
Item Name Description
1 Editor toolbar This toolbar contains commands the let you edit
and save a decision flow. The Parent View icon is
disabled because it is not used in this context.
1 Editor toolbar This toolbar contains commands that let you edit,
save, and perform versioning operations. The
Parent View icon is disabled because it is not used
in this context.
2 Decision Flow editor toolbar This toolbar contains commands that let you cut,
copy, paste, or delete decision flow entities or
change the orientation of the decision flow and
magnification of the decision flow diagram.
3 Canvas The main work area of the editor. Displays the
decision flow diagram for editing.
4 Decision Flow Floating toolbar Paste or insert a task, subflow, split, or loop.
5 Details pane Defines a decision flow or decision flow elements
such as a task, subflow, split, or loop.
6 Preview pane Displays the entity that has been associated with a
decision flow entity such as a task.
Chapter 10: Controlling the Execution Flow
100 Fair Isaac Corporation Confidential and Proprietary Information
Related Links
Creating Decision Flows
Inserting Decision Flow Entities
The Details Pane
Decision Flow Editor Toolbar Commands
The Decision Flow editor toolbar commands are used to perform routine
operations on a decision flow.
Table 14: Decision Flow Editor Toolbar Commands
Command Icon Description
Undo Reverts the previous operation.
Redo Reverts the Undo operation.
Cut Cuts a decision flow entity. Use the Paste icon on the
editor toolbar or the floating toolbar to insert it in another
flow location.
Copy Copies a decision flow entity. Use the Paste icon on the
editor toolbar or the floating toolbar to insert it in another
flow location.
Paste Pastes to insert a new decision flow entity or to replace
an existing one.
Delete Deletes a decision flow entity.
Zoom in Increases the magnification of the decision flow.
Zoom out Decreases the magnification of the decision flow.
Revert to
default size
Reverts to the default magnification of 100% scale.
Fit to current
window
Fits the decision flow diagram to the screen and behaves
in the following way depending on the size of the
diagram and any existing magnification settings.
■ If the decision flow diagram is smaller than the width of
the canvas area but is magnified more than 100%, use
this icon to restore the view to the size of the screen.
■ If the decision flow diagram is larger than the canvas
area, use this icon to scale down the diagram to fit the
screen.
■ If the magnification is already using the size of the
screen and you click this icon, you will see no change.
Show/Hide
Overview
Displays the Overview box that you can use to navigate
to the area of the decision flow you want to view.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 101
Table 14: Decision Flow Editor Toolbar Commands (continued)
Command Icon Description
Direction Displays the decision flow with a horizontal or vertical
orientation and a left to right or right to left direction.
Print Prints the decision flow. Depending on the supported
browser you are using and the preferences you have set
for your printer, you may see a preview of the decision
flow.
Note Depending on size of your decision flow and the
page orientation setting of your printer, the decision flow
will be printed with wrapping.
Decision Flow Floating Toolbar Commands
The Decision Flow Floating toolbar commands are used to create or paste
new decision flow elements.
Click anywhere between the start node and the end node of a decision flow to
see an insertion point. When you place your cursor over the insertion point,
the floating toolbar is displayed.
Figure 21: Floating Toolbar
Table 15: Decision Flow Floating Toolbar Commands
Command Decision Flow Display Description
Paste icon
None Pastes a decision flow entity
that you cut or copied using
the icons on the Decision Flow
editor toolbar.
Task icon
Executes an associated entity.
Subflow icon Invokes another decision flow
with its own nodes.
Chapter 10: Controlling the Execution Flow
102 Fair Isaac Corporation Confidential and Proprietary Information
Table 15: Decision Flow Floating Toolbar Commands (continued)
Command Decision Flow Display Description
Split icon Permits processing along each
branch based on a boolean
condition.
Loop icon Conditionally repeats a node.
There are different control
constructs available.
Related Links
Defining Tasks
Defining Subflows
Defining Split Nodes
Defining Loops
Creating Decision Flows
Create a decision flow to define the sequence in which the decision entities
are executed in a decision service.
Note The system template version must be at least the minimum required
for the release in order for you to create an entity from the New dropdown.
If you are unable to create such an entity due to an error, you may
need to update your system templates or contact your RMA system
administrator.
1 In the Project Explorer, open the New drop-down menu.
2 Select Decision Flow.
3 In the Create Decision Flow dialog, enter a unique name in the Name
field.
4 Press Create.
5 Click on the start node or end node or Decision Flow name in the canvas
to display the details pane to the right side of the canvas.
6 Select an Input type from the drop-down list. By default, the Input type
is the class you selected when you configured the decision service.
If there is a global variable of the same class type as the input type, you
see the variable name displayed in the Assign input to field.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 103
7 (Optional) You can use the Decision flow variables table to add flow
variables to your decision flow.
8 (Optional) Enter the purpose of the decision flow in the Comments field.
9 Click Apply.
Related Links
Valid Entity Names
Inserting Decision Flow Entities
The Details Pane
The Details Pane
The details pane contains the fields and drop-down lists where you can define
the properties for a given decision flow or decision flow element.
To edit decision flow properties in the details pane, select the start node. To
edit the properties of a decision element, such as a task or loop, select the
element in the canvas. What you see in the details pane is specific to the
decision flow entity that is selected in the decision flow. However, there are
areas of the details pane that are common to most decision flow elements.
Table 16: Features in the Details Pane
Area Description
Reference Name field Enter a reference name for the decision flow entity.
If you need to call a decision flow from another SRL entity, use
the name in this field. The names of tasks, subflows, splits, and
loops are display labels.
Open Editor icon Opens the Rule Builder editor where you can create a condition.
You see fields in the details pane for split and loop decision flow
entities.
Comments text area Enter information about the decision flow entity for other users
who may access it.
Navigate to the Entity icon Closes the Decision Flow editor and opens an editor where you
can view the decision entity.
Preview the Entity icon Opens the Preview pane located near the bottom of the Decision
Flow editor to display the entity associated with the decision flow
entity.
Apply button Registers the changes you have made to the canvas.
Chapter 10: Controlling the Execution Flow
104 Fair Isaac Corporation Confidential and Proprietary Information
Decision Flow Variables
Decision flow variables can be used to define conditions or pass values from
one task to another task in a flow. The decision flow variables can only be
used within a flow.
In Edit mode, you can create a new decision flow variable by clicking on the
start node of a decision flow to display the Details pane.
Creating a Flow Variable
You create a flow variable when you want to pass values from one task to
another task in the flow or you want to define branch conditions.
1 Click Add on the context toolbar to add a flow variable row to the
Decision flow variables table.
2 Click Apply before clicking on the default flow variable name.
3 Enter a name for the flow variable in the Name field.
4 Select a type from the Type drop-down list.
You can select types including, boolean, date, duration, integer, money,
real, string, time, timestamp, object, and any classes you have in your
Business Object Model. Depending on the type you selected, the Initial
Value field will display an appropriate default value.
Note By default, utility, support classes, and referenced classes are
not available in this drop-down list. If you want to use a support class
as a flow variable type, you need to add it to your Business Object
Model.
Setting a Decision Flow Variable or Parameter Value
When creating a decision flow variable or parameter, you can select a type
and set an initial value.
Value Types
There are three different value types:
■ Value (default)
This is a fixed value that is automatically added by default. You can edit
this value with a value of matching type. This is implemented with the
Type Values Provider.
■ Reference
The reference is to an existing variable (local or global) or objects that are
of matching type.
■ Expression
You can use the Rule Builder to set an object property or use a built-in
function.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 105
Table 17: Description of Value Types
Type Default Value Reference Expression
boolean Default initial value is
true.
If there is a variable of
boolean type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type boolean.
date The default value is
the current month,
date, year displayed
as mmm, dd, yyyy.
Use the calendar
widget to select a
different date value.
If there is a variable of
date type, this variable
will be available in the
drop-down list.
Create an expression
that evaluates to a
value of type date.
duration The default value is 1
second.
If there is a variable of
duration type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type duration.
integer The default value is 0. If there is a variable of
integer type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type integer.
money The default value is
USD 1.0.
If there is a variable of
money type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type money.
real The default value is 0. If there is a variable of
real type, this variable
will be available in the
drop-down list.
Create an expression
that evaluates to a
value of type real.
string The default value is
0.0.
If there is a variable of
string type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type string.
time The default value is
the current time
displayed as
hh:mm:ss AM/PM.
If there is a variable of
time type, this variable
will be available in the
drop-down list.
Create an expression
that evaluates to a
value of type time.
timestamp The default value is
the current date and
time displayed as
mmm dd, yyyy
hh:mm:ss AM/PM.
If there is a variable of
timestamp type, this
variable will be
available in the dropdown
list.
Create an expression
that evaluates to a
value of type
timestamp.
object The default value is
null.
Select another object
of the same object
type.
Create an expression
that evaluates to a
value of type object.
Chapter 10: Controlling the Execution Flow
106 Fair Isaac Corporation Confidential and Proprietary Information
Table 17: Description of Value Types (continued)
Type Default Value Reference Expression
Class in the Business
Object Model
The default value is
null.
Select a class or
variable of the same
Class type.
Create an expression
that evaluates to a
value of the class you
selected as your type.
NdScoreModelReturnI
nfo (Support class for
the Scorecard.)
The default value is
null.
Select a class or
variable of the same
Class type.
Create an expression
that evaluates to a
value of the class you
selected as your type.
Inserting Decision Flow Entities
Insert or paste a task, subflow, split, or loop to the decision flow using the
Decision Flow Floating toolbar.
1 Click anywhere between the start node and the end node to add an
insertion point. Place your cursor over the insertion point to display the
Decision Flow Floating toolbar.
2 Select the desired command from the toolbar.
3 In the details pane on the right side of the canvas, define the decision
flow entity.
The fields that are displayed depend on the entity you inserted.
Related Links
Decision Flow Editor Toolbar Commands
Decision Flow Floating Toolbar Commands
Defining Tasks
Defining Subflows
Defining Split Nodes
Defining Loops
Defining Tasks
Define a task you have inserted into a decision flow using the details pane to
associate it with a decision entity.
A task represents a unit of work that is completed by an entity such as a
function or a ruleset. Define a task by entering a label name, selecting an
implementation type, assigning a return value, if applicable, and assigning a
value to one or more parameters.
After the decision flow is invoked and the first task evaluates the incoming
data, the next task in the sequence performs its evaluation. This process
continues until the execution is completed and the end node is reached.
1 Enter a name in the Label field. This name displays in the task node in
the decision flow on the canvas.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 107
2 Select an entity. By selecting an implementation for a task, you are
associating the task with the entity that will be used to evaluate the data
at a given point in the execution.
The drop-down list shows the full signature including the return type. The
information displayed for the functionals include its name and can include
one or more comma-separated defined parameters types within
parentheses and a return type. If the entity has one or more parameters,
you need to assign values to parameters (in order). The parameter value
can be set as a value, reference, or expression.
3 If the entity has a return value, you need to assign a return value of
matching type. The return value can be set as a reference (default) or as
an expression.
4 (Optional) Enter information in the Comments field for other users who
may need to maintain the decision flow.
5 Click Apply to register your changes.
Related Links
The Details Pane
Defining Subflows
Define a subflow that represents a segment of the execution flow in your
decision flow.
A subflow is a decision flow that represents a well-defined unit of work within
a larger execution flow. From a design point of view, you partition the tasks
in your execution flow to create a set of smaller, reusable decision flows.
Subflows are invoked as functionals, just like decision flow tasks that invoke
rulesets and decision tables.
As you analyze the execution flow of your business process, you may choose
to either:
■ Break down the high-level tasks into many smaller tasks visible in the
decision flow diagram.
■ Create a set of smaller decision flows to represent each high-level task
and insert them in a super decision flow as subflow nodes.
Note Subflow parameters are not supported.
Related Links
The Details Pane
Chapter 10: Controlling the Execution Flow
108 Fair Isaac Corporation Confidential and Proprietary Information
Defining Split Nodes
Insert a split node in a decision flow when you need to add conditional
branches to your decision flow.
Define a split by entering a label name and then creating a condition
expression for each branch using the Rule Builder. For example, this is a
condition:
customer.accountType is "standard"
If the data that is passed into split node matches one of the branch
conditions, the data is evaluated by the decision flow entities on that branch.
You can use special value keywords when creating condition expressions to
test for the presence of a value not specified in the XML payload, and the
property is used in the decision logic. The keywords are available,
unavailable, known, unknown, and null.
Related Links
The Details Pane
Defining Loops
Define a loop when you want to repeat the execution of one or more tasks a
specified number of times, for each instance in a collection, or until a certain
condition has been satisfied.
You define a loop by selecting a loop type and entering a label name in the
details pane. The loop type determines the fields you see in the details pane.
Table 18: Types of Loops
Loop Type Execution of one or more tasks
Repeat Iterates specified number of times or while a
condition you specify is satisfied.
For each Iterates for each instance of a given collection.
You must have a top-level global variable that
is an array of complex type. For example, a
global variable that is an array of
BankAccounts. To loop through a complex type
collection property, you need to use a Repeat
loop.
Related Links
The Details Pane
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 109
Looping Through a Complex Type Collection Property
The use of a complex type collection property in a Decision Flow is not
supported in for each loops . If you need to use a complex type collection
property, use a repeat loop.
You need to create a function in your project prior to generating your RMA.
In the RMA, you create a decision flow task implementing the function prior
to adding a repeat loop.
1 Create a function in your project prior to generating your RMA.
For example, you can create a function called getTotalSize that returns an
integer and in the function body you can enter {return
object.propertyName.count;}
2 Generate your RMA, create a decision flow by using the Create Decision
Flow icon on the Project Explorer toolbar.
3 In the Decision Flow editor, select the start node and create a flow
variable to hold the total count/size of the collection as an integer type
with an initial value of 0.
For example, totalCount=0;
4 Create another flow variable to hold the current position in the collection
as an integer type and give it an initial value of 0.
For example, currentPosition=0;
5 Insert a Task, enter a label and select the function you created to get the
total count/size as your Implementation and assign the flow variable
you created to hold the total count/size to the Return value field.
6 Insert a Loop with a Loop type of Repeat.
7 Assign the flow variable you created to hold the current position to the
Initial assignment field in the Rule Builder.
For example, currentPosition=0;
8 In the Repeat While field, create a condition using the current position
and the total count/size flow variables in the Rule Builder.
For example, currentPosition is smaller or equal to
totalCount;
9 Increment the current position flow variable in the After each iteration
do field.
For example, currentPosition=currentPosition+1;
10 Save your changes.
Chapter 10: Controlling the Execution Flow
110 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 11
Extending an Object Model with Business
Term Sets
Create a business term set to prototype a new object model or to extend an
existing object model in your project. After one or more business term sets
are defined, use them to author rules in rulesets, decision tables, decision
trees, and other entities.
Note A business term set name cannot be the same as any global entities
such as a class, variables, patterns, or named objects in your project.
However, a term set name can be the same as an existing class property
name.
When a business term set is created, a global variable with the same name is
available when authoring rules in the entities. This variable allows you to use
business terms when authoring rules. To ensure that your project compiles,
initialize the global variable in the project using Blaze Advisor's Structured
Rule Language (SRL). If you are unsure about how to do this, contact your
RMA system administrator.
Creating Business Term Sets
Create a business term set to add an additional object model or value lists
that you can use to write your rules.
If the Business Term Set Template is not available, it is because it was not
included when the RMA was generated.
1 In the Project Explorer, open the New drop-down menu.
2 Select Custom Entity.
3 In the dialog, select Business Term Set Template.
4 Enter a unique name in the Name field.
5 Press Create.
After you open or create a business term set, the Business Term Set page
appears. From the Business Term Set page, define the business term set and
its associated terms and value lists. A global variable is automatically created
for each Business Term Set, which makes it available for rule authoring in
various entities. To define the business term set, click the Edit icon.
Fair Isaac Corporation Confidential and Proprietary Information 111
Related Links
Valid Entity Names
Defining Business Term Sets
Use the Business Term Set page to define the business term set.
It contains the following fields and sections:
Name A unique name for the business term set. A valid name consists of
one or more letters (A–Z, a–z), digits (0–9), and underscores (_). It
cannot contain spaces, punctuation marks, or special characters,
such as $ or %. You cannot use the name of an existing class,
variable, pattern, or named object; however, you can use the name
of an existing object model property as the business term set name.
A term set can also have the same name as an existing business
term.
Input class (Optional) Select object or the name of a class from the object
model. Select object if the business term set you are defining is not
extending an existing class. If you want to extend an existing class,
select the class name from the drop-down list. When you begin
writing rules, you can select business terms from the term set or
you can use the properties from your term set input class.
Global
variable
name
The global variable represents the term set in the editors when you
create entities. By default the global variable name is the name
given to the business term set prepended with "the". If you later
rename your business term set after you have used it in various
entities, you must modify the rules in those entities to avoid
compilation errors.
Description (Optional) A description of the business term set.
Business
Terms
An individual term in the business term set. After you create a term,
click on the link to go to a page where you can define it.
Value Lists A list of string values that you can associated with a business term
of type string. After you create a value list, click on the link to go to
a page where you can define it. Later you can associate it with a
business term of string type.
Creating Business Terms
Business Terms are similar to object properties in that they have a name and
a data type. You can create one or more business terms for a business term
set.
Create a business term by adding a link to the table in the Business Term
section of the Business Term Set page. After the link is created, use it to go
to the page where you can define the Business Term. Use the icons on the
table to create additional terms, delete terms, or to arrange them in the order
Chapter 11: Extending an Object Model with Business Term Sets
112 Fair Isaac Corporation Confidential and Proprietary Information
you want to see them displayed in the list. You can also define a term
calculation on the Business Term page.
Note Only terms of primitive types such as boolean, date, duration,
integer, money, real, string, time, and timestamp are supported.
Related Links
Valid Entity Names
Creating Value Lists
Defining Business Terms
Click a link in the Business Terms table to open a business term and define it.
The Business Term page contains the following fields and sections:
Term
Attributes
Enter a unique name for the term. The term name must be unique in
the business term set. A valid name consists of one or more letters
(A-Z, a-z), digits (0-9), and underscores (_). It cannot contain
spaces, punctuation marks, or special characters, such as $ or %.
Select a type. If the term is a string type, you can select a value list
if one exists. Optionally, enter a description for the term.
Term
Calculation
Specify a calculation when you want to assign a value to the
business term.
Creating a Term Calculation
To assign a value to your business term, create a business term calculation.
Use either the Rule Builder or Advanced Builder to write assignment
statements.
Create a term calculation to:
■ Map a term to a property in your input data model. For example:
Guarantor.age=input.PersonInfo.age;
■ Calculate a term's value based on other terms. You can use a control
construct that eventually assigns a value for the term. For example,
suppose you have a monthlySalary term, you could write the following
control construct to assign a value to monthlySalary:
...
if (age > 30 and age < 40
then monthlySalary = 4000.00;
else if (age >= 40 and < 50) then
monthlySalary = 5000.00;
...
As a best practice, to assign a value to a business term using a term
calculation, edit each business term individually to write an assignment
statement in its term calculation field.
You can use special value keywords when creating assignment statements to
test for the presence of a value not specified in the XML payload, and the
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 113
property is used in the decision logic. The keywords are available,
unavailable, known, unknown, and null.
Related Links
Authoring Decision Logic Using SRL
Creating Value Lists
A value list is a set of string values that you can associate with a business
term of type string. When a business term of type string is used in a ruleset,
decision table, or decision tree, you can select a value from the list. A value
list can only be associated with the terms in a given term set and cannot be
shared across term sets.
Create a value list by adding a link to the Value Lists table. Use the link to go
to the page where you can define the list of values. Enter a name for the
value list, and then enter a unique internal value and a unique display value
for each item. The display name appears in the drop-down list when a value
is selected in a decision entity, such as a ruleset. The internal value appears
in the underlying SRL as a string value. When authoring decision logic in the
advanced builder editor or in a function, you can reference the internal value
or the display value in the SRL.
Defining Value Lists
Use the Value List page to create a list of values that you can associate with
a business term of type string.
The Value List page contains the following fields and sections:
Name and
Description
Enter a unique name for the value list. The value list is always a
string data type. Optionally, enter a description for the term.
List Values Allows users to create a value list and add list items with a
unique value and a unique display value on the same page. For
the best results, after entering each value and display value pair,
save the changes.
Chapter 11: Extending an Object Model with Business Term Sets
114 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 12
Searching for Entities
Use a query to search for entities in your project.
You can search for entities based on the following criteria:
■ Name of an entity as listed in the Project Explorer.
■ Template on which an entity was based.
■ Display text and values on a web page in any of the entities.
■ Location of the entity.
■ Date the entity was created.
■ Author of the entity.
■ Any management properties used in the entity.
■ Historical information.
The search fields in a query can be used individually or with other search
terms. If more than one search term is used, all search terms must be
satisfied before any results are returned. Any fields where a search term has
not been defined are ignored or default values are used.
Creating and Running Standard Business
Queries
Use the Query editor to create and run a query to locate specific entities.
1 In the Search pane, select New Search > New Search Query.
2 Under Search for any policy, use one or more of the following fields to
build the search:
a whose name field: Retain the contains match text operator or select
another text operator and enter a string or a regular expression for an
entity name. For example, to search for the PricingRuleset, you could
enter Pricing* or ^Pricing to locate the entity. The text operator
drop-down contains a list you can use to constrain the query. If you
are using the exactly matches or is equal to operators, enter
the full, case-sensitive name.
b whose type field: Retain the contains match text operator or select
another text operator and enter a string or a regular expression to
locate all of the entities based on a specific template name. For
Fair Isaac Corporation Confidential and Proprietary Information 115
example, Loan Approval*. In this case, any entities based on a
template with the words Loan Approval would be returned.
c whose display text field: Retain the matches all words in
option or select another option and enter a case-sensitive string.
d located in field: Click the down arrow to display a choice of
locations. Choose one of the following locations:
■ Anywhere (default)—The project will be searched for matching
entities.
■ Folder—A specific folder will be searched for matching entities.
Enter a path from the root folder of the project to the
subdirectory that you want searched.
For example, folder/subfolder/subfolder.
If you use the exactly matches or is equal to text operators, enter
the full, case-sensitive path name for the folder.
e In the last modified field, click the down arrow to display the
following duration options.
■ Anytime (default)
■ After a date—Queries for entities modified after the date you
enter.
■ Before a date—Queries for entities modified before the date you
enter.
■ Between 2 Dates—Queries for entities modified between the two
dates.
f In the by field, click the down arrow to display possible ways to
search according to user name:
■ Anytime (default)
■ One of the following User(s)—If this option is selected, you can
use a text operator from the drop-down list and enter a casesensitive
text string or regular expression to constrain the query.
3 Click the Search icon on the Query editor toolbar to start the search.
The results are also saved in the Search pane so you can refer to them at
anytime during the current session.
4 (Optional) Click the Save icon or, if it exists, click the Check in icon.
Query Field Definitions
Supplemental information is available about the query fields.
Table 19: Supplemental Information About Query Fields
Search Field Behavior
whose name When used on its own, a
query based on this field
returns any top-level entity
whose name matches the
Chapter 12: Searching for Entities
116 Fair Isaac Corporation Confidential and Proprietary Information
Table 19: Supplemental Information About Query Fields (continued)
Search Field Behavior
string or regular expression
entered in the field.
whose type When used on its own, a
query based on this field
returns any top-level entity
based on a template that
matches the string or regular
expression entered in the field.
display text field When used on its own, a
query based on this field
returns any entity that contains
the display text (string) or
regular expression entered in
the field.
You can refine a display text
query by restricting the search
to the entities matching the
string entered in the whose
name field or the string
entered in the whose type
field.
Important To find specific
rules that have been stored
as entities, enter a string in
the display text field;
otherwise, only top-level
entities are returned when the
other query fields are used.
Additional Search Criteria
There are two additional query conditions: Management Property and
Historical Information
■ Management Property—This condition requires that the top-level entities
contain a management property that matches the specified criteria. More
than one management property condition can be used.
■ Historical Information—This condition searches for the latest version of an
entity or a comment in the latest version.
These conditions can be used separately or in conjunction with each other. All
of the conditions used in a query must be satisfied before a result can be
returned.
Search conditions are added using the toolbar shown in this figure.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 117
Figure 22: Adding Search Conditions
Chapter 12: Searching for Entities
118 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 13
Comparing Differences Between Entities
Compare the differences between entities using a comparison query. You can
compare a prior version of an entity to another prior version of an entity or to
the current version.
Obtain a visual comparison of the content between:
■ Projects (the content in a project)
■ Project folders
■ Project entities (also known as project items)
You can use one or more filters to narrow the query. For example, you could
use a filter to compare only the rulesets authored by a specific user.
Additionally, you can view comparisons between two different entities in a
separate editor. Like other queries, these queries can be saved, edited, and
run again. After running the query, the results appear in the Comparison
Criteria Results Merge editor.
Creating and Running Comparison Queries
Use the Comparison Query editor to compare differences between different
versions of entities.
Note
■ To see the latest content in the repository, update your workspace
prior to running the comparison query.
■ For consistent results, add the older folder, project, or project entity
on the left side of the comparison and the folder, project, or project
entity with the potentially different values or structures on the righthand
side.
■ The placement of the folder, project, or project entity is significant if
you anticipate merging the comparison results from the Source (left
column) to the Target (right column). The entity referenced on the
right side should be the one you want to change if differences are
detected. This entity also needs to needs to be checked out for the
merging to be enabled.
Fair Isaac Corporation Confidential and Proprietary Information 119
Tip For best results, when creating entities that you may want to use for
later comparisons, use distinct entity names so that you can easily
differentiate between the entities in your comparison results.
1 In the Navigation pane, click the Compare pane to expand it.
2 Click New Comparison.
3 From the Compare menu, select the scope for the comparison.
You can choose the Projects, Project folders, or Project entities level
scope for your comparison.
■ If you select Projects, you can select the Compare instances only
check box to limit the comparison to instances in your project.
■ If you select the Project folders, you can select the Compare
subfolders check box to compare the contents of your folders and
subfolders.
■ If you select Project entities, you can select both the Compare
instances only and the Compare subfolders check boxes, to
compare entities in your folders and subfolders.
■ If you select Project entities and you are using a versioned
repository, you can compare different versions of the same entity.
Note that this option is not applicable for the new decision trees.
4 (Optional) If you are using a versioned repository, you can also perform a
comparison on different versions of the same entity. Select one of these
options from the Version drop-down menu.
Because folders are not explicitly versioned, there are no previous
versions to compare.
■ Local version
The current edited version.
■ Base version
The working version of the last update.
You can compare the Local version to the Base version to track
changes since the last update.
■ Latest in repository
The latest version in the repository.
You can compare the Latest in repository version against the Base
version to see if your entities are out-of-date and you need to
update.
■ (For Projects and Project entity comparison types only) The number
representing a prior version such as 1, 2, 3....
Any version numbers in the list match the ones displayed in the
History tab for the entity.
5 (Optional) Configure filter criteria.
a Add one or more filter conditions to narrow the comparison criteria.
b Select View to make the filter criteria read-only.
6 Click the Compare icon to run the query.
Chapter 13: Comparing Differences Between Entities
120 Fair Isaac Corporation Confidential and Proprietary Information
7 (Optional) Click the Save As icon to save the query.
Related Links
Comparison Query Results Merge Actions
Comparison Query Results
When a comparison query is run, the results are displayed in the Comparison
Criteria Results Merge editor. The editor allows you to merge differences
detected during the comparison process.
The results are displayed in a table with three columns. The Source column is
located on the left side and the Target column is located on the right side.
The Source and Target columns are divided by a narrower Merge column
that displays the merge actions that are available for the entities.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 121
Figure 23: Example of a Query Performed on Two Different Versions of a
Ruleset
To see the rule contents of an individual rule, open the Visual Difference
dialog by clicking the Visual Differences icon in the Target column.
Chapter 13: Comparing Differences Between Entities
122 Fair Isaac Corporation Confidential and Proprietary Information
Figure 24: Visual Differences Dialog
In the Visual Comparison editor, if there are additional differences in the
values within an entity that can be viewed, a Jump to drop-down menu
displays in the upper right corner of the editor. Select a rule in the drop-down
menu to open a separate Visual Comparison editor that displays just that
portion of the difference. For example, if you run a comparison query to
compare versions of a ruleset and differences are detected in a rule, you can
open the Visual Comparison editor window to see the differences between
the rule and view the modified values.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 123
Figure 25: Example of Jump to Menu
Note The Visual Comparison editor is not available for the new decision
trees introduced in Decision Modeler 1.4 and Blaze Advisor 7.3.
Related Links
Creating and Running Comparison Queries
Comparison Query Results Merge Actions
In the Comparison Criteria Results Merge editor, you can merge one or
more differences using the commands in the Merge column.
The commands in the Merge column allow you to selectively incorporate
differences detected in a comparison query. If a merge icon is displayed but
disabled, place your cursor over the icon to obtain more information about
the reason why merge action is restricted or disallowed. There are several
reasons why an entity cannot be merged including:
■ The target entity may be locked by another user.
■ The target entity needs to be checked out before it can be merged.
Open the entity and check it out or check it out from the Project Explorer.
If a merge icon is displayed, place your cursor over the icon to see the tooltip
name. Some icons look similar but may have a different meaning depending
on the color associated with the row in which they are displayed.
Table 20: Descriptions of Merge Icons
Comparison
Summary
Category Merge Icon Description
Deleted Add If you have entities that are present in the Source
but not in the Target, you can use the Add icon in
the Merge column to add those entities to the
Target.
Modified Replace If a difference between the value or type in the
Source and the value or type in the Target is
detected, you can use the Replace icon in the
Merge column to overwrite the value or type in the
Target with the value or type from the Source.
Added Delete If you have entities that are present in the Target
but not in the Source, you can use the Delete icon
in the Merge column to remove those entities from
the Target.
Chapter 13: Comparing Differences Between Entities
124 Fair Isaac Corporation Confidential and Proprietary Information
Table 20: Descriptions of Merge Icons (continued)
Comparison
Summary
Category Merge Icon Description
Order
Changed Reorder
If you have entity contents in the Source and the
Target where the order of the contents have
changed, you can use the Reorder icon to
overwrite the order in the Target with the order from
the Source.
Limitations in Comparison Queries
These limitations exist for comparison queries in this release.
■ Comparison queries are not supported for comparing decision trees.
■ The Visual Difference editor is not available for decision trees or
scorecards created by importing a PMML file.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 125
Chapter 13: Comparing Differences Between Entities
126 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 14
Filtering Content
Filters are used to temporarily include or exclude specific entities while
performing certain operations. The entities remain available but are not
accessed when certain operations are performed.
For example, you can use filters to include or exclude specific types of entities
when performing these types of operations:
■ Searching for entities.
■ Selecting entities for use in a comparison query.
■ Running verification tests.
A project can contain any number of filters and each filter can be configured
to include or exclude specific content; however, only one filter can be applied
at a time.
For each filter, you can do the following:
■ Specify the entities to temporarily include or exclude from the decision
service.
■ Set additional conditions to narrow the scope of the filter.
If more than one filter condition is used, all conditions must be satisfied
for the entities to be included or excluded from the project. For example,
you can configure a filter to Exclude any entities of SRL Enumeration or
SRL Variable type that meet the Additional filter criteria where the
Name contains match ProjectType AND the Management Property
value for the Test Role is equal to Setup.
When the filter is applied, the entities that match these criteria will be
included and those entities that do not will be temporarily filtered out.
Fair Isaac Corporation Confidential and Proprietary Information 127
Figure 26: Filter that Includes Specific Entities and Excludes All Other Content
Creating Filters
Create a filter to temporarily include or exclude entities.
1 In the Navigator, expand the Filter pane.
2 Click the Create Filter icon to open the Create New Filter dialog.
a Enter the name for the filter in the Filter Name field.
b In the Filter Template field, retain the default selection, which is
Standard Filter.
c Select a folder to store the filter.
d Click Create Filter.
Chapter 14: Filtering Content
128 Fair Isaac Corporation Confidential and Proprietary Information
3 Configure the filter:
Retain Include to include any of the entities that you designate or select
Exclude to exclude the entities.
■ When you include certain types of entities in a filter, this means that
they are included when certain operations are performed, but all other
entities are excluded.
■ When you exclude certain types of entities, this means that they are
excluded when certain operations are performed, but all other entities
are included.
4 From the that are drop-down menu, retain that are or select that are
not.
5 From the Type drop-down menu, select the type of entities to filter. By
default, Entry is displayed.
Entry is an inclusive term that describes all top-level entities stored in
folders in a repository, except for subprojects and other folders.
6 (Optional) Click the Add icon (green + sign) to select an additional entity
to the same filter set. For example, if you want to filter an SRL Ruleset
and Decision Table, after selecting SRL Ruleset using the first Entry dropdown
list, click Add and use the <Entry> link to select Decision Table.
7 (Optional) Click the Add additional filter conditions link and select a
condition type.
8 (Optional) Click the Save icon.
Related Links
Adding Conditions to Filters
Adding Conditions to Filters
Add conditions to a further refine the criteria for those entities that will be
included or excluded.
A filter condition is added using the Add additional filter conditions link.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 129
Figure 27: Additional Filter Criteria Menu
1 Click the Add additional filter conditions link and select the condition
type. This is a description of each filter condition:
■ Management Property
Filter according to a specific management property value. For
example, you could include or exclude all entities of certain types
that contain a given Source Reference management property value.
After you select a management property that is associated with the
entity, select an operator from the drop-down list next to it, and
enter a valid value. The contents in the drop-down list are
dynamically displayed based on the management property name or
operator you select.
■ Latest version
Filter using the latest version. For example, you could include or
exclude all entities of certain types to see only latest version. For this
condition, you can select an operator that enforces or ignores casesensitivity,
and then enter a string or regular expression.
■ Comment for latest version
Filter using the text in the check in comments for the latest version.
■ Author of latest version
Filter using the user name for the latest version.
■ Name
Filter using the entity name as it is displayed on the page. For
example, you could include or exclude all entities of certain types
according to the entity name or a portion of the entity name. For this
filter, you can select an operator that enforces or ignores casesensitivity
and then enter a string or a regular expression.
■ Last Modified Date
Filter using the last modified date of an entity. For example, if you
are using a File repository, you would use the modified date as it is
displayed in Windows Explorer. Select an operator from a drop-down
list and select a date from the calendar widget or enter a date value
using the format: mmm, dd, yyyy.
■ Location
Use this condition to filter the entities in a folder using the folder
name in the storage system. For this condition, you can select a text
Chapter 14: Filtering Content
130 Fair Isaac Corporation Confidential and Proprietary Information
operator that enforces or ignores case-sensitivity from a drop-down
list and enter a string or regular expression value. While you can
include or exclude content in the folder, you cannot include or exclude
the folder itself.
■ Text Content
Filter using a string value in the Description field.
For this condition, you can select a text operator that enforces or
ignores case-sensitivity from a drop-down list and enter a string or
regular expression value.
You cannot use this condition to filter using the names of templates,
providers, queries, and instance files. Use the Name filter for this
purpose instead. Suppose you want to filter to include all the entities
with "Ruleset" in their names. If you use the Text Content condition,
you may not get the results you expect, but if you use the Name
condition, you will see all the entities with "Ruleset" in the name.
2 (Optional) Click the Add icon to create another condition and repeat Step
1.
3 (Optional) Check in the filter to reuse it again later.
4 (Optional) Click the Save As icon to save the query.
5 (Optional) Click the Check In icon if one is displayed to store the query in
the versioning service.
Applying Filters
Apply a filter to include or exclude entities. Only one filter can be applied at a
time.
If a filter is applied that excludes entities that are referred to from another
entity, that entity is still displayed with the RMA links but you cannot use the
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 131
link to preview or navigate to an entity. After the filter is cleared, the
navigation to the linked entities become available again.
1 Expand the Filter pane.
2 Click on an existing filter to open it.
3 Click the Apply Filter icon at the bottom of the Filter pane. Alternatively,
you also can open the filter and click the Apply Filter icon on the Filter
editor toolbar.
Related Links
Clearing Filters
Clearing Filters
Clear a filter to restore the content that was temporarily excluded when the
filter was applied.
u In the Filter pane, click the Clear Filter icon.
Exclusion Filter Reference
When entities are temporarily excluded by applying a filter, the entities
remain available for certain operations.
Operations Impact of Filtering on the Operations
Creating new entities In the New File dialog, you can still create a
new entity, such as a decision tree or function.
If you filter out any custom template instances,
you cannot create new versions of them. For
example, if you create a Decision Table
Template and you filter out decision tables,
you cannot create a decision table while the
filter is applied.
Performing routine operations In the Explore pane and Project Explorer,
filtered entities are temporarily hidden in these
views so they cannot be deleted or copied,
etc.
Generating a report Filtering has no impact on what is generated in
the report. When a report is generated, the
excluded entities appear in the report.
Creating and running queries When a query is run, any excluded entities are
not included in the search results.
Creating and running comparison queries When a comparison query is run, any
excluded entities are not compared.
Additionally, any excluded entities are not
available in the Select Entity dialog when
performing Project entities comparisons.
Chapter 14: Filtering Content
132 Fair Isaac Corporation Confidential and Proprietary Information
Operations Impact of Filtering on the Operations
If the comparison query was created in the
Blaze Advisor IDE and it compares the
contents of two projects and the excluded
entity appears in both projects, the results will
show that the entity is one project, but not the
one where the filter has been applied.
Creating and running verification queries When a verification query is run, the excluded
entities are not included in the verification
results. If there are any anomalies involving
the excluded entities, those messages do not
appear in the results. While you can select an
excluded entity for an individual verification
run, when you run the Verifier if there are any
anomalies with that entity those messages do
not appear in the results.
Running Decision Testing Filtering does not impact decision testing. All
appropriate entities for decision testing are
available in the Decision Testing drop-down
menu.
In an RMA, you can still use Decision Testing
if the project does not compile because of the
excluded entities.
Running unit tests with brUnit Filtering does not impact brUnit.
In an RMA, you can still use brUnit if the
project does not compile because of the
excluded entities.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 133
Chapter 14: Filtering Content
134 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 15
Detecting Anomalies in Entities
Create and run verification queries to detect anomalies in entities such as
rulesets and decision tables.
An anomaly is a logical problem that is evaluated by using one or more
algorithms to highlight areas of potential conflict, inefficiencies in your rule
architecture, and semantic errors. By default, the Verifier performs static
verification tests on all of your entities. However, you can configure the
Verifier to run only the tests you need on all or a limited set of entities.
Entities are defined as the following:
■ rulesets
■ functions
■ decision tables
■ scorecards
■ decision trees
■ classic decision trees
■ decision graphs
■ ruleflows (instances of Flow Templates)
■ decision flows
A verification query is used to select the tests that you want to run. After the
Verifier is run, if any anomalies are found, a message is printed for each one
along with the name of the entity where the problem was detected. Once you
have the information, you can decide, depending upon the severity of the
anomalies, whether or not to correct them.
The Verifier reports errors, but it also generates warning and informational
messages that provide you with an opportunity to correct any potential
problems. While you do not have to address an anomaly generated by a
warning or informational message, it is recommended that you review the
entity where the anomaly was diagnosed to see if it is a potential problem or
it is a result of your rule design.
Fair Isaac Corporation Confidential and Proprietary Information 135
Verification Tests
By default, the Verifier runs all applicable tests on all supported entities.
Configure a verification query to do the following:
■ Test only those entities you specify.
■ Omit tests that you do not want used.
The Verifier runs all tests that are appropriate for all of the decision entities
or just the ones you select. It automatically disables any tests that are not
applicable or that provide unnecessary feedback. For example, decision tables
allow the creation of a large number of rules with identical conditions and/or
actions. As a result, the Verifier automatically disables any test that
generates warnings about these types of anomalies for decision tables. The
Verifier runs only those tests that provide meaningful feedback. After the
Verifier is run, a message is printed for each anomaly in the Results pane or a
message is generated indicating that no anomalies were found.
The Verification Test Reference section in the Developing Rule Projects
chapter of the Blaze Advisor documentation provides a usage description, one
or more SRL code samples, and other pertinent information for each test.
After reading the descriptions, you can decide if there are any tests that you
want to disable or enable based on the entities you want tested.
In this release, there are some types of expressions that are not supported
for verification testing. By default, the Verifier does not print messages that
are not supported when it encounters them. However, you can enable the
Conditions not evaluated by verifier option and the Verifier will print
messages for any expressions it does not evaluate.
Note For information on the individual verification tests, refer to the
Developing Rule Projects chapter of the Blaze Advisor documentation.
Creating and Running Verification Queries
Use the Verification Query editor to create and run a query to detect
anomalies in a project.
To create and run a verification query:
1 Expand the Verify pane.
2 Click New Verification Query to create a new Verification Query.
3 Using the Decision Entities menu, retain All to run the applicable tests
on all decision entities or click All and select Individual Entities .
If Individual Entities is selected, the Empty List is displayed.
a Click in the row with the words Empty List to enable the toolbar.
Chapter 15: Detecting Anomalies in Entities
136 Fair Isaac Corporation Confidential and Proprietary Information
b Click the Add icon to enable the drop-down menu where you can
select the entity name.
c Select the entity and click Add.
d Repeat Steps 3b and 3c for each entity that you want tested.
4 (Optional) Under Usage Tests, disable any test that you do not want to
use.
5 (Optional) Scroll down the list of test and select Conditions not evaluated
by verifier to display messages about the condition expressions that are
not evaluated.
6 Click the Verify icon located on the menu bar.
7 (Optional) Click Verification Criteria located at the top of the page to
configure the verification query again to run other tests.
8 (Optional) Click the Save As icon to save the query.
Verification Query Results
After the Verifier is run, it prints a message about each anomaly in the Results
pane or it generates a message saying that no verification results were found.
Each type of anomaly is associated with an icon, a message, and the name of
the entity where the problem was encountered.
This table shows the three levels of severity and what each level means for
the discovered anomalies:
Table 21: Levels of Severity
Symbol Type of Message Description
Error message A serious error has been detected and it will
probably affect the efficiency and outcome of
the rules.
Warning message An anomaly has been detected; however, it
may or may not affect the efficiency and the
outcome of the rules.
Information message The information is provided as a convenience,
but there is no anomaly associated with the
message that will prevent the entities from
executing as expected.
The Verifier diagnoses an anomaly as erroneous if there is a combination of
input parameters that could lead to a compilation error or unpredictable
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 137
behavior. If the anomaly does not generate erroneous conditions, but leads
to wasted resources, such as initialized variables that are not used, then a
warning is generated.
For example, when the Verifier tests this function, it reports three anomalies:
a Account is a object with {
a accountNumber : a string,
a accountOpenDate : a date,
a accountType : a string,
a balance : a money
}
function main
is {
x is a Account;
y is some Account;
z is some Account;
z = y; //y is used before definition.
y = x;
}
The anomalies are displayed in the Results pane in the RMA.
Figure 28: Results Pane
The Verifier generated this information:
■ The date and time the decision entities were evaluated.
■ An error message because variable y was not initialized before it was
used.
■ A warning message because once variable y was assigned, the value was
not read.
■ A warning message because once variable y was assigned, the value was
not read.
The error, warning, and informational messages are generated in the order in
which the Verifier encounters them in the rules or in a specific entity.
Chapter 15: Detecting Anomalies in Entities
138 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 16
Decision Testing
Upload a dataset to the Decision Testing page to test whether or not your
decision logic is generating the expected results. When the data is run, it is
evaluated by the decision logic in the entities and the results are displayed in
the page. The Decision Test page is accessible from the Test pane.
The decision logic is evaluated by invoking a decision entity that has a return
type and at least one parameter. Decision entities are defined as rulesets,
functions, and decision flows to name a few examples. When the dataset is
uploaded, the data is evaluated by the decision logic in that decision entity
and by all of the decision entities it references.
The dataset must be comma-separated values (.csv) file. Use the Configure
Data window, available from the Decision Testing page, to specify the
following:
■ The properties for which you will pass in data.
■ The properties for which you want the result values displayed in the
Decision Testing page.
■ The properties for which you will supply the expected values so they can
be compared against the result values.
The properties may be properties of a class-type parameter or a primitive type
parameter. After you have specified the properties for the input, expected,
and result properties, a .csv file is created with the correct structure that you
can download and use to populate the input and expected data.
After the dataset is populated, upload it to the Decision Testing page, and run
the evaluation. After the results are displayed, you can download a .csv file
that not only contains the original input and expected values but also includes
the result values and the status of each test.
Decision Entity Requirements
The decision entity selected in the Decision Testing page must meet these
requirements.
■ The decision entity must have a return type and at least one parameter.
■ If a ruleset, decision table, decision tree, scorecard or function is used as
the decision entity, ensure that a return statement is included. Note that a
Fair Isaac Corporation Confidential and Proprietary Information 139
scorecard created by importing a PMML scorecard uses void as the
return type so it should not be used as the decision entity.
■ If the decision entity or any of the referenced decision entities use
business terms in the decision logic, the business term sets must be
initialized.
Dataset Requirements
The dataset used for decision testing must be a .csv (comma-separated
values) file that conforms to specific requirements for the input and expected
data.
If the Configure Data window is used to create the file structure, you only
need to be aware of the structural requirements if you modify the file or
decide to create your own file.
Input and Expected Data Requirements
Review the input and expected data requirements to understand how to
prepare the data.
■ The input data values must be listed in the columns with the headers
displaying the parameter property names, such as accountBalance.
■ If expected columns are included in the dataset, the data values must be
listed in the columns with the headers displaying the word "expected"
prefixed before the property name. For example,
expected:accountBalance.
■ Each column must contain data that converts to the correct type for the
property listed in the column header. For example, if accountBalance
is a real property, the input or expected data must be of type real.
■ Values do not require SRL punctuation. For example, date and timerelated
values do not require single quotes.
■ For timestamp values, use a four-digit year in the values.
■ If there is no value in an input data cell, the special value unavailable
is automatically used.
■ If a test contains an empty cell in an expected data column, validation
does not occur for the associated result value.
■ The special values unknown, unavailable, or null can be entered as
input and expected values. The special values known and available
are not applicable.
■ For enumeration values, you can use the full name such as
enumerationName.enumerationItem or just enumerationItem.
For example, if Color is the name of the enumeration, you can enter
Color.green or green. Enumeration result values are always displayed in
their full name form, such as Color.green.
Chapter 16: Decision Testing
140 Fair Isaac Corporation Confidential and Proprietary Information
■ When supplying input or expected data for business terms of type string
that have an associated value list, use the Value names and not the
Display Value names.
■ If an expected value is entered for a real value, the precision of the result
value will be made to match the precision of the expected value. If no
expected value is entered for a real value, the full precision of the result
value is displayed.
For information about the formats for the various data type values, see the
Blaze Advisor Structured Rule Language Syntax Guide.
Note When using Microsoft Excel, ensure that the data in the cells use
"text" formatting. Sometimes the format in the cells changes without
warning so it is important to verify that your data is in the correct format
before uploading the file to the Decision Testing page.
Collection-Type Properties
The data for collection-type properties must meet specific requirements.
A collection-type property is defined as a property that is one of the following:
■ Fixed or dynamic array of a primitive type.
■ Member of a fixed or dynamic array of a class type.
When a collection-type property is selected as an input, result, or expected
property, the generated configuration file includes columns for two members.
This is an example of how a configured dataset appears by default when
collection-type properties are selected as input and result properties. In this
case, two properties from VehicleInfo[], which is a collection of class
VehicleInfo, have been selected as input properties and one property was
selected as a result property.
Figure 29: Configuration File Example
Add columns for each additional member that is required as an input, result,
or expected value or remove any unwanted columns.
While it is expected that each member in a collection will have a full set of
data, there are some cases where the data might not be available. Gaps in
data are permitted only if the gaps occur in cells that are in columns where
the member number is greater than the member number of the last
contiguous set of values. For example in the first row, there is a gap in the
third member, but that is permitted because data are available for the first
and second members in the collection.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 141
Figure 30: Gaps in Data that Do Not Result in Errors
This is an example of non-contiguous data that results in errors. In each
case, the first two members are missing data. If the second member in row 2
or the first member in row 3 had at least one value in a column, an error
would not be thrown.
Figure 31: Gaps in Data that Result in Errors
Note Properties of multi-dimensional arrays are not supported with
decision testing.
File Structure Requirements
If the Configure Data window is used to generate the .csv file, the structure
is created for you. However, if you modify the structure of the file or create
your own file, then you need to be aware of the file structure requirements.
■ The first row must contain only column headers.
■ The Data-ID column is an optional column that you can use to label each
test. Each row of data is a separate test.
■ If the Data-ID field is used, the column header must be Data-ID. The
header is case-sensitive.
■ If the Data-ID field is used, it must be the first column.
■ For each input property, the column header must be the case-sensitive
name of a property passed in from your object model or a primitive type
parameter.
■ For each result property, the column header must be the case-sensitive
name of a property from your object model or a primitive type parameter
with the word "result:" prepended to the name. This is an example:
result:accountBalance.
■ For each expected property, the column header must be the casesensitive
name of a property from your object model or a primitive type
parameter with the word "expected:" prepended to the name. This is an
example: expected:accountBalance.
Chapter 16: Decision Testing
142 Fair Isaac Corporation Confidential and Proprietary Information
■ For each expected property column, there must be a matching result value
column.
■ The columns of data must be contiguous. If an empty column without a
column header appears in between two columns of data, an error is
thrown.
■ Input columns must appear before result and expected value columns or
an error is thrown.
■ The order of the expected and result columns does not matter as long as
they appear after the input columns.
■ For duplicate property names at different hierarchies in the object model,
use the shortest path that includes the name of the parent classes until
the property names are unique. This is an example of two identically
named properties in the LoanApplication class:
Employer.address.zipCode and Applicant.address.zipCode.
For best results, use the Configure Data window to generate a sample file
to see how the duplicate property names must appear.
■ If a functional takes a parameter and the input file does not have an input
column for that parameter, the values passed to the functional for the
missing parameter are unknown.
■ The encoding for the .csv file must be Unicode (UTF-8).
Testing Rules in the Decision Testing Page
Use the Configure Data window to generate a .csv file containing the correct
structure, populate the file with your input data and any expected values, and
then upload it to the Decision Testing page. After the decision testing run, the
result values are displayed.
In the Configure Data window, the parameters in the selected decision entity
appear as inputs. You can select any primitive type parameters or properties
from any class-type parameters needed for the input data. The expected and
result value(s) are selected from the return type parameter.
Note To run the evaluation, the decision service must compile
successfully.
1 Prior to configuring a decision test:
a Determine which entity you want to use for the decision test run.
b Review the decision logic in any decision entities called by the
selected decision entity.
c Make a list of the input and result properties or primitive type
parameters that are needed to test your decision logic.
2 Expand the Test pane and select Decision Testing.
3 Click the Select a decision entity drop-down menu and select the
decision entity. (Only decision entities that have at least one parameter
and a return type appear in the list.)
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 143
4 Click Configure Data to open a window where you can select the
properties on which to base the input values.
5 Select the properties for which you want the results displayed in the
Decision Testing page. The maximum depth at which you can select a
property is 20.
6 (Optional) Select the check boxes next to any result values where you will
supply expected values that will be compared against the result values.
7 Click Done.
8 Click the Download icon to download the file to your desktop.
9 Populate the input columns with the input data.
10 Populate any expected columns with the expected values. Any cells in the
expected columns without values are ignored for validation purposes.
11 Click Upload Data, select the .csv file, and click Open.
12 (Optional) Click the Filter columns icon to hide columns from the
display.
13 Click Run Test.
14 (Optional) Click the Download icon to download the file to your desktop.
The file contains any input data, expected values, and the result values.
There is an additional column that appears after the Data-ID column
called Result-State that lists the status of each test. If the file is
uploaded to the Decision Testing page again for another test run, the
results in the Result-State column are overwritten with the results of the
new run.
Related Links
Decision Entity Requirements
Input and Expected Data Requirements
File Structure Requirements
Understanding the Results
Each row in the .csv file is one test. After each test in the dataset is
evaluated, the result values are populated in the results columns. There are
three possible outcomes for each test: passed, validation failure, or runtime
error.
After the evaluation, the number of any tests that passed (green), generated
validation failures (yellow), or runtime errors (red) are shown in the bar
above the table.
Runtime errors are usually generated for one or more of the following
reasons:
■ A cell contains a value that cannot be converted to the correct data type.
■ Empty values or missing input columns may lead to evaluation errors in
statements that expect data to be set.
Chapter 16: Decision Testing
144 Fair Isaac Corporation Confidential and Proprietary Information
If a test generates unavailable or unknown in the result column and you
were not expecting that value, review your decision logic and the associated
input values. These are a few of the reasons why a special value may occur in
a result column:
■ An unknown value is one that has not been initialized. This typically
happens when a rule or statement setting the value is not executed.
Properties that are not present in the input data set are not initialized
and, as a result, are unknown by the entities.
■ A value is unavailable when there is no data. Any empty input cells
are considered unavailable, and may lead to unavailable results.
■ The special value unavailable or unknown was entered as an input for
one or more values in a test.
Any cells in a row that are highlighted in yellow means that a validation failure
occurred because a result value in the test did not match the corresponding
expected value. The expected and result values must not only match, but they
must be of the same data type.
Note The result for a real value may be rounded to match the desired
precision. The precision is set by the expected value, if one has been
entered.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 145
Chapter 16: Decision Testing
146 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 17
Unit Testing
If a project contains unit tests or includes the ability to create unit tests, you
can run them using the testing framework, which is accessible from the Test
pane.
Unit tests perform an action that compares an expected result with the actual
result. Use the testing framework to run test cases to verify that your entities
are generating the expected results.
Figure 32: Test Cases from the Testing Rules Example
To open the testing framework, click on the project name or on a test case
folder. In the preceding screenshot, the project name is “Testing Rules” and
each of the folders represents a test case. A test case is a group of related
tests. Grouping tests into test cases is usually used when the tests need to
run in a specified order.
To run the tests, select the project name or a test case folder. The test page
changes so that you can run the test. Click Start new run at the top of the
interface. After the tests have been evaluated, the results appear in the Status
column. Any error messages are displayed in the Test Result column.
If you decide to stop the evaluation while testing framework is processing the
tests, click Stop current run. After you click the icon, the entire test run is
stopped after the test that is currently being evaluated is finished. Note that
you can start a new test run, but that you cannot resume the one that has
been stopped.
Fair Isaac Corporation Confidential and Proprietary Information 147
Note You can run the testing framework if the project has a compilation
error, but you see errors after the tests are evaluated. For best results,
compile the project first and then run the testing framework.
Running the Testing Framework
In the Test pane, select the project name or a test case to run in the testing
framework.
The Test pane must be available in the RMA and the project used to generate
the RMA must contain test cases.
1 In the Navigator, expand the Test pane.
2 Perform either one of the following steps:
■ Select the project name to run all of the tests in the project.
■ Select a test case to run a particular group of tests.
3 Click Start new run.
4 View the results.
Viewing the Testing Results
After the testing framework evaluates the tests, it displays several visual cues
that let you quickly scan the results. There are three possible outcomes that
are displayed - Success, Failed, or Error
■ Success—A test passes successfully when the test evaluates as expected.
■ Failed—A test fails when the test does not evaluate as expected.
■ Error—A test generates an error message, when an error is encountered
while evaluating the test.
An error in the testing framework is different from a compilation error.
The testing framework informs you about problems with the way tests are
structured, but any errors with Blaze Advisor’s Structured Rule Language
(SRL) usage are reported as compilation errors.
If the test was created in the RMA, click the link to the entity, make the
necessary changes and then rerun the testing framework. If the entity that
failed is not in the RMA, correct the problem in the Blaze Advisor IDE or
contact your RMA system administrator to have the entity updated.
Chapter 17: Unit Testing
148 Fair Isaac Corporation Confidential and Proprietary Information
CHAPTER 18
Troubleshooting
These topics provide troubleshooting assistance.
Decision Table Profiling
Review these common profiling problems that can easily be addressed.
Rule profiling problems fall into several categories:
■ Issues with attaching and mapping data files.
■ Data files that contain missing or incorrect data.
■ Decision table conditions that use unsupported expressions.
Tip In the dataset (CSV file), line 1 contains the headers (condition
labels) so the first line containing the values is line 2. An error reported at
line 44 may actually be an error on line 45.
Issue Attaching and Mapping Dataset Files
Errors may occur when you attach a dataset file to a decision table.
The following messages appear at the top of the Run Sample Data dialog
when a problem occurs while attaching a dataset file:
■ Unsupported file format. Please upload a .csv file.
Use a .csv file for rule profiling. Selecting any other type of file results in
this message.
■ Incorrect header bindings: Supplied number of headers in dataset is less
than the number of condition rows and columns.
The rule profiler must be able to match the headers in the dataset file
with the condition labels in the decision table. This message indicates that
the dataset does not contain sufficient matching headers and that the
mapping is incomplete.
Dataset Files Contain Missing or Incorrect Data
Errors occur when the dataset contains missing or incorrect data.
When you run the profiler, error messages may indicate a problems with the
content of the dataset.
Fair Isaac Corporation Confidential and Proprietary Information 149
In order for rule profiling to run successfully, the data must be organized in
columns and each set of data values must be complete. The only exception is
for string values, which can have an empty values.
These messages occur when the dataset contains an empty data value of the
specified type:
■ Invalid money value: Cannot parse ‘‘ as a money amount.
■ Invalid boolean value: Cannot parse ‘‘ as a boolean amount.
■ Invalid integer value: Cannot parse ‘‘ as a integer amount.
Each column of values must contain data of the correct type for the
corresponding condition expressions.
These messages appear when the dataset contains a value of the wrong data
type:
■ The row '42' of data set contains '2' columns, '4' were expected.
In the dataset, each row of condition values must contain the exact same
number of values. This error message was generated because the values
in two columns were missing.
■ Invalid boolean value: YES
■ Invalid integer value: blue
■ Invalid money value: 2000 Cannot parse ‘2000’ as a money amount as it
does not specify a currency
Changes to the Dataset Do Not Appear in Rule
Profiling
When a dataset is modified, you need to reattach it to the decision table
before running rule profiling. The modified file does not get upload
automatically.
Decision Table Export and Import
Export and import problems or failures can occur for a variety of reasons. For
example, mismatched formatting or values formatted with non-allowed
expressions can cause errors.
Chapter 18: Troubleshooting
150 Fair Isaac Corporation Confidential and Proprietary Information
Cell Coordinate Messages
A cell coordinate message indicates a problem with the import operation and
identifies the location where it occurs in the .csv file. The location is an x, y
coordinate. X is for the row and y is for the column.
The following are the cell coordinate messages:
■ The cell at coordinates [22, 1], has value value "", which does not match
any of the available formats for the cell.
This message appears because the cell is empty.
■ The cell at coordinates [2, 4], has value value "90", which does not match
any of the available formats for the cell.
This message may appear for one of the following reasons:
- A disallowed cell format has been applied to a value in the .csv file.
- The column order has changed
Note Error messages that display the coordinates for a .csv file table
cell count the header row as row 1. In this .csv file example, the
coordinates for the Ford Thunderbird Rating value are (4, 4), even though
in a decision table they might appear to be (3, 4).
"Import Cannot Proceed" Messages
Import cannot proceed messages specify the reason why the import stopped.
Usually the import operation stops for one of the following reasons:
■ Header column order has changed.
■ One or more header columns have been deleted or added.
■ Header column or row order has changed.
■ One or more header columns or rows have been deleted.
■ One or more header columns or rows have been added.
■ One or more dimensions of a Double-axis decision table have changed:
the number of columns or the number of rows.
RMA User Guide
Fair Isaac Corporation Confidential and Proprietary Information 151
Chapter 18: Troubleshooting
152 Fair Isaac Corporation Confidential and Proprietary Information
APPENDIX A
Contacting FICO
FICO provides clients with support and services for all our products. Refer to
the following sections for more information.
Product Support
FICO offers technical support and services ranging from self-help tools to
direct assistance with a FICO technical support engineer. Support is available
to all clients who have purchased a FICO product and have an active support
or maintenance contract. You can find support contact information and a link
to the Customer Self Service Portal (online support) on the Product Support
home page (www.fico.com/en/product-support) or by emailing
support@fico.com.
The FICO Customer Self Service Portal is a secure web portal that is available
24 hours a day, 7 days a week from the Product Support home page. The
portal allows you to open, review, update, and close cases, as well as find
solutions to common problems in the FICO Knowledge Base.
Product Education
FICO Product Education is the principal provider of product training for our
clients and partners. Product Education offers instructor-led classroom
courses, web-based training, seminars, and training tools for both new user
enablement and ongoing performance support. For additional information, visit
the Product Education home page (www.fico.com/en/product-training) or
email producteducation@fico.com.
Product Documentation
FICO continually looks for new ways to improve and enhance the value of the
products and services we provide. If you have comments or suggestions
regarding how we can improve this documentation, let us know by sending
your suggestions to techpubs@fico.com.
Fair Isaac Corporation Confidential and Proprietary Information 153
Sales and Maintenance
If you need information on other SuiteName products, or you need to discuss
maintenance contracts or other sales-related items, contact UnitName by:
■ Phone: UnitPhone1 or UnitPhone2
■ Web: UnitWeb and use the available contact forms
Related Services
Strategy Consulting: Included in your contract with FICO may be a specified
amount of consulting time to assist you in using FICO Blaze Advisor RMA to
meet your business needs. Additional consulting time can be arranged by
contract.
Conferences and Seminars: FICO offers conferences and seminars on our
products and services. For announcements concerning these events, go to
www.fico.com or contact your FICO account representative.
FICO Community
The FICO Community is a great resource to find the experts and information
you need to collaborate, support your business, and solve common business
challenges. You can get informal technical support, build relationships with
local and remote professionals, and improve your business practices. For
additional information, visit the FICO Community (community.fico.com/
welcome).
About FICO
FICO (NYSE:FICO) powers decisions that help people and businesses around
the world prosper. Founded in 1956 and based in Silicon Valley, the company
is a pioneer in the use of predictive analytics and data science to improve
operational decisions. FICO holds more than 165 US and foreign patents on
technologies that increase profitability, customer satisfaction, and growth for
businesses in financial services, telecommunications, health care, retail, and
many other industries. Using FICO solutions, businesses in more than 100
countries do everything from protecting 2.6 billion payment cards from fraud,
to helping people get credit, to ensuring that millions of airplanes and rental
cars are in the right place at the right time. Learn more at www.fico.com.